@model ProductDetailsModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Media
@using System.Text
@using DocumentFormat.OpenXml.Wordprocessing
@using Nop.Services.Catalog
@using Nop.Services.Media
@inject IDownloadService downloadService
@inject CatalogSettings catalogSettings
@if (Model.ProductAttributes.Count > 0)
{
    <div class="attributes">
    <dl>
    @foreach (var attribute in Model.ProductAttributes)
    {
        var controlId = $"{NopCatalogDefaults.ProductAttributePrefix}{attribute.Id}";
        var textPrompt = !string.IsNullOrEmpty(attribute.TextPrompt) ? attribute.TextPrompt : attribute.Name;
        <dt class="my-[15px]" id="@($"{NopCatalogDefaults.ProductAttributePrefix}label_{attribute.Id}")">
            <label class="text-prompt">
                @textPrompt
            </label>
            @if (attribute.IsRequired)
            {
                <span class="required">*</span>
            }
            @if (!string.IsNullOrEmpty(attribute.Description))
            {
                <div class="attribute-description">
                    @Html.Raw(attribute.Description)
                </div>
            }
        </dt>
        if (attribute.Id == 671)
        {
            <div class="w-full flex flex-col justify-center items-center gap-3">
            <div class="customer-voiceRecoder bg-[#f5c0cd1a]">
            <div id="vOrderTitleRecord" class="customerVoiceTitle w-full flex justify-center items-center">
                <h2 class="title"> ثبت سفارش با ضبط صدا: </h2>
            </div>
            <div id="startRecordingBtn" class="start-recording-button flex justify-center items-center gap-[20px]">
                <svg class="fill-iconLightColor stroke-iconLightColor stroke-3" height="50px" width="50px" viewBox="0 0 384 512" xmlns="http://www.w3.org/2000/svg">
                    <path d="M192 352c53.03 0 96-42.97 96-96v-160c0-53.03-42.97-96-96-96s-96 42.97-96 96v160C96 309 138.1 352 192 352zM344 192C330.7 192 320 202.7 320 215.1V256c0 73.33-61.97 132.4-136.3 127.7c-66.08-4.169-119.7-66.59-119.7-132.8L64 215.1C64 202.7 53.25 192 40 192S16 202.7 16 215.1v32.15c0 89.66 63.97 169.6 152 181.7V464H128c-18.19 0-32.84 15.18-31.96 33.57C96.43 505.8 103.8 512 112 512h160c8.222 0 15.57-6.216 15.96-14.43C288.8 479.2 274.2 464 256 464h-40v-33.77C301.7 418.5 368 344.9 368 256V215.1C368 202.7 357.3 192 344 192z"/>
                </svg>
                <span class="text-[16px] font-semibold text-[#3a77ff]">شروع ضبط</span>
            </div>
            @* <canvas class="visualizer" height="60px"></canvas> *@
            <div class="recording-contorl-buttons-container hide">
                @* <i class="cancel-recording-button fa fa-times-circle-o" aria-hidden="true"></i><svg id="Icons" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><defs><style>.cls-1{fill:#232323;}</style></defs><path class="cls-1" d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm4.707,14.293a1,1,0,1,1-1.414,1.414L12,13.414,8.707,16.707a1,1,0,1,1-1.414-1.414L10.586,12,7.293,8.707A1,1,0,1,1,8.707,7.293L12,10.586l3.293-3.293a1,1,0,1,1,1.414,1.414L13.414,12Z"/></svg> *@
                <div id="cancel-recording-button" class="cancel-recording-button">
                    <svg class="fill-red-400 stroke-red-400 stroke-3" height="25px" width="25px" id="Icons" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <defs>
                            <style>.cls-1{fill:#f82d3e;stroke: #f82d3e !important;}</style>
                        </defs><path class="cls-1" d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm4.707,14.293a1,1,0,1,1-1.414,1.414L12,13.414,8.707,16.707a1,1,0,1,1-1.414-1.414L10.586,12,7.293,8.707A1,1,0,1,1,8.707,7.293L12,10.586l3.293-3.293a1,1,0,1,1,1.414,1.414L13.414,12Z"/>
                    </svg>
                </div>
                <div class="recording-elapsed-time">
                    <svg class="red-recording-dot fill-red-400 stroke-red-400 stroke-3" height="20" width="20" id="icon" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                        <defs>
                            <style></style>
                        </defs><title/><circle cx="16" cy="16" r="8"/><rect class="cls-1" data-name="&lt;Transparent Rectangle&gt;" height="32" id="_Transparent_Rectangle_" width="32"/>
                    </svg>
                    <p class="elapsed-time"></p>
                </div>
                <div id="stop" class="stop-recording-button">
                    <svg class="fill-[#00a93e] stroke-[##00a93e] stroke-3" height="25px" width="25px" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
                        <path d="M328 160h-144C170.8 160 160 170.8 160 184v144C160 341.2 170.8 352 184 352h144c13.2 0 24-10.8 24-24v-144C352 170.8 341.2 160 328 160zM256 0C114.6 0 0 114.6 0 256s114.6 256 256 256s256-114.6 256-256S397.4 0 256 0zM256 464c-114.7 0-208-93.31-208-208S141.3 48 256 48s208 93.31 208 208S370.7 464 256 464z"/>
                    </svg>
                </div>
            </div>
            @* <div class="text-indication-of-audio-playing-container"> *@
            @*     <p class="text-indication-of-audio-playing hide">Audio is playing<span>.</span><span>.</span><span>.</span></p> *@
            @* </div> *@

            @* <div class="overlay hide"> *@
            @*     <div class="browser-not-supporting-audio-recording-box"> *@
            @*         <p>To record audio, use browsers like Chrome and Firefox that support audio recording.</p> *@
            @*         <button type="button" class="close-browser-not-supported-box">Ok.</button> *@
            @*     </div> *@
            @* </div> *@
            <div id='uploadSection' class="flex flex-col justify-center items-center gap-2 hide">
                <div id="audio">
                    <audio controls class="audio-element">
                    </audio>
                </div>
                <div class="w-[95%] flex justify-between items-center">
                    <div id="upload" class="voiceOrder-action-btn bg-[#3a77ff] w-[50%] h-[36px] flex justify-center items-center gap-1 border-[1px] border-solid border-borderPrimary rounded-[10px] cursor-pointer rounded-[10px] py-[7px] px-[10px]">
                        <svg class="stroke-white feather feather-upload" height="20" width="20" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" x2="12" y1="3" y2="15"/>
                        </svg>
                        <span class="text-[12px] text-white font-semibold">بارگذاری</span>
                    </div>
                    <div id="removeRecordingVoice" class="w-[40%] flex justify-center items-center gap-1 border-[1px] border-solid border-borderPrimary rounded-[10px] py-[7px] px-[10px] cursor-pointer">
                        <svg class="fill-red-400 stroke-red-400" height="17" width="17" stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"></path><path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"></path>
                        </svg>
                        <span class="text-[12px] font-semibold">حذف</span>
                    </div>
                </div>
            </div>
            <div id="successUpload" class="successUpload">

                <div class="flex flex-col justify-start items-start gap-3">
                    <h2 class="text-[13px] text-green-600 font-semibold">
                        فایل شما با موفقیت بارگذاری شد.
                    </h2>
                    <span class="text-[13px]">
                        افزودن به سبد را انتخاب کنید.
                    </span>
                </div>
                @* <div class="full flex justify-end mt-[30px]"> *@
                @*     <button onclick="confirmUploadVoice()" class="text-[13px] border-[1px] border-solid border-borderPrimary rounded-[7px] py-[5px] px-[20px] cursor-pointer">بازگشت</button> *@
                @*  </div> *@
            </div>
        </div>
        <dd class="customer-voiceRecoder" id="@($"{NopCatalogDefaults.ProductAttributePrefix}input_{attribute.Id}")">
        <div id="vOrderTitleAdded" class="customerVoiceTitle w-full flex justify-center items-center">
            <h2 class="title"> ثبت سفارش با افزودن فایل صوتی:</h2>
        </div>
        @switch (attribute.AttributeControlType)
        {
            case AttributeControlType.DropdownList:
            {
                @* <select data-attr="@(attribute.Id)" name="@(controlId)" id="@(controlId)" @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onchange=\"showHideDropdownQuantity('{controlId}')\"") : null)> *@
                @* <option value="0">@T("Products.ProductAttributes.DropdownList.DefaultItem")</option> *@
                @* @foreach (var attributeValue in attribute.Values) *@
                @* { *@
                @* var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ? *@
                @*            attributeValue.Name : *@
                @*             T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, *@
                @*                 attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text; *@
                @*          <option data-attr-value="@attributeValue.Id" selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeName</option> *@
                @* *@
                @*    } *@
                @*  </select> *@
                <input type="hidden" id="boxAttributeId" value="@(attribute.Id)"/>

                <div id="selectorWeightProperty" data-attr="@(attribute.Id)" class="selected-product-property flex flex-wrap items-center justify-start gap-4 lg:gap-3 mt-3 p-2"
                     data-attr="@(attribute.Id)" name="@(controlId)" id="@(controlId)" @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onchange=\"showHideDropdownQuantity('{controlId}')\"") : null)>
                    @foreach (var attributeValue in attribute.Values)
                    {
                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                            attributeValue.Name :
                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text;
                        <div class="flex items-center min-h-[35px] min-w-[90px] rounded-[40px] py-[5px]
                       px-[10px] cursor-pointer transition-all duration-200 border-[2px] border-solid border-borderPrimary"
                             data-attr-value="@attributeName" attr-id="@attributeValue.Id"
                             onclick="CartManager.changePriceByAttribute(@Model.Id,@(attribute.Id),@attributeValue.Id)">
                            <span class="checkSelected-Property flex items-center w-[20px] h-[20px] border-[1px] border-solid border-borderPrimary rounded-[40px]">
                                <span class="pr-[2px]">

                                </span>
                            </span>
                            <span id="attributename-@attributeValue.Id" class="propertyContent text-[13px] pr-1">
                                @attributeName
                            </span>
                        </div>
                        @* <div  id="radioItem"  *@
                        @*      class="flex items-center justify-center gap-2 border-[1px] border-solid border-zinc-300 rounded-[10px] p-2 text-[14px] cursor-pointer"> *@
                        @*     <input onclick="CartManager.changePriceByAttribute(@Model.Id,@(attribute.Id),@attributeValue.Id)"  type="radio" id="@attributeValue.Id" name="weightSelector" value="@attributeName" class="cursor-pointer">  *@
                        @*     <label for="@attributeValue.Id" class="cursor-pointer">@attributeName</label> *@
                        @*   </div> *@
                    }
                </div>
                <input type="hidden" id="attributeId"/>
                <input type="hidden" id="attrValue"/>

                foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                {
                    <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box">
                        <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                        <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)"/>
                    </div>
                }
                <script asp-location="Footer">
                let attributeIdElement = document.getElementById('attributeId')
                let attrValueElement = document.getElementById('attrValue')
                
                 let attrElement  = document.querySelectorAll('#selectorWeightProperty div')
                 attributeIdElement.value =  attrElement[0].getAttribute("attr-id") 
                 attrValueElement.value =  attrElement[0].getAttribute("data-attr-value")
              
                      attrElement.forEach((element)=>{
                          element.addEventListener("click",()=>{
                              let attributeId = element.getAttribute("attr-id")
                              let attrValue = element.getAttribute("data-attr-value")
                                  attributeIdElement.value =  attributeId  
                                  attrValueElement.value =  attrValue                           
                              })
                            
                          })
                          
                ////////////////////////////////////////////////////////////  Additional Script
                
                        // $(document).ready(function() {
                        //     showHideDropdownQuantity("@controlId");
                        // });
                        
                               const selectedProperty = $("div.selected-product-property div")
                                 const selectedPropertychildren = $(
                                   "div.selected-product-property div .checkSelected-Property span"
                                 )
                                 selectedProperty.removeClass("activeProduct-property")
                                 selectedProperty.first().addClass("activeProduct-property")
                                 selectedProperty.find("span").first().addClass("activeProduct-property-child")
                               
                                 $(selectedProperty).map(function (index, item) {
                                   $(item).on("click", function (e) {
                                     $(selectedProperty).removeClass("activeProduct-property")
                                     $(selectedProperty)
                                       .find("span")
                                       .removeClass("activeProduct-property-child")
                                     $(this).addClass("activeProduct-property")
                                     $(this).find("span").first().addClass("activeProduct-property-child")
                                   })
                                 })
                                 var temp = `<svg class="fill-secondary stroke-secondary stroke-2" width="14px" height="14px"
                                                                               viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
                                                                               <path
                                        d="M480 128c0 8.188-3.125 16.38-9.375 22.62l-256 256C208.4 412.9 200.2 416 192 416s-16.38-3.125-22.62-9.375l-128-128C35.13 272.4 32 264.2 32 256c0-18.28 14.95-32 32-32c8.188 0 16.38 3.125 22.62 9.375L192 338.8l233.4-233.4C431.6 99.13 439.8 96 448 96C465.1 96 480 109.7 480 128z" />
                                                                           </svg>`
                               
                                 selectedPropertychildren.first().append(temp)
                                 defaultProSelected = $(".propertyContent").first().text()
                                 $("#productProperty").text(defaultProSelected)
                                 selectedProperty.map(function (index, item) {
                                   $(item).on("click", function () {
                                     $(selectedProperty).find("svg").remove()
                                     $(item).children().children().append(temp)
                                     const selectedProItem = $(item).children().text()
                                     $("#productProperty").text(selectedProItem)
                                   })
                                 })
                //////////////////////////////////////////////////////////// End of Additional Script
               </script>
            }
                break;
            case AttributeControlType.RadioList:
            {
                // $$$$$$//////////////////////////////////////////////////////////////   Chopping Selector

                <input type="hidden" id="boxChoppingAttributeId" value="@(attribute.Id)"/>

                <div id="selectorWayChProperty" data-attr="@(attribute.Id)" class="selected-wayofChop-property flex flex-wrap items-center justify-start gap-4 lg:gap-3 mt-3 p-2"
                     data-attr="@(attribute.Id)" name="@(controlId)" id="@(controlId)" @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onchange=\"showHideDropdownQuantity('{controlId}')\"") : null)>
                    @* <ul id="selectorWayChProperty" data-attr="@(attribute.Id)" class="option-list flex flex-col justify-center items-start gap-[17px] px-[10px]"> *@
                    @foreach (var attributeValue in attribute.Values)
                    {
                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                            attributeValue.Name :
                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text;
                        <div onclick="CartManager.getShoppingCartData()" class="flex items-center min-h-[35px] min-w-[90px] rounded-[40px] py-[5px]
                       px-[10px] cursor-pointer transition-all duration-200 border-[2px] border-solid border-borderPrimary"
                             data-attr-value="@attributeValue.Id" attr-id="@attributeValue.Id">
                            @* <li data-attr-value="@attributeValue.Id"> *@
                            <span class="checkSelected-Property flex items-center w-[20px] h-[20px] border-[1px] border-solid border-borderPrimary rounded-[40px]">
                                <span class="pr-[2px]">

                                </span>
                            </span>
                            <span id="chopAttrId-@attributeValue.Id" class="propertyContent text-[13px] pr-1">
                                @attributeName
                            </span>
                            <input hidden id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                   @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}')\"") : null)/>
                            @* <label hidden for="@(controlId)_@(attributeValue.Id)">@attributeName</label> *@

                            @if (attributeValue.CustomerEntersQty)
                            {
                                <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                    <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                    <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)"/>
                                </div>
                            }
                            @* </li> *@
                        </div>
                    }
                </div>
                <input type="hidden" id="attributeIdWayCh"/>
                <input type="hidden" id="attrValueWayCh"/>

                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        showHideRadioQuantity("@controlId");
                                    });
                ////////////////////////////////////////// Chopping Scripts
                        ////////////////////////////////////////////////////////////  Additional Script
                                        
                                                // $(document).ready(function() {
                                                //     showHideDropdownQuantity("@controlId");
                                                // });
                                                
                                                       const selectedPropertyWayChop = $("div.selected-wayofChop-property div")
                                                         const selectedPropertyWayChopchildren = $(
                                                           "div.selected-wayofChop-property div .checkSelected-Property span"
                                                         )
                                                         selectedPropertyWayChop.removeClass("activeProduct-property-chopping")
                                                         selectedPropertyWayChop.first().addClass("activeProduct-property-chopping")
                                                         selectedPropertyWayChop.find("span").first().addClass("activeProduct-property-chopping-child")
                                                         selectedPropertyWayChop.find("input").first().attr('checked',true)
                                                         
                                                           let firstItemInputSelected = selectedPropertyWayChop.find("input").first().val()
                                                           
                                                           $('#attributeIdWayCh').val(firstItemInputSelected)
                                                           // $('#attrValueWayCh').val(firstItemlabelSelected)
                                                           
                                                            // console.log($('#attributeIdWayCh').val())
                                                           
                                                         $(selectedPropertyWayChop).map(function (index, item) {
                                                           $(item).on("click", function (e) {
                                                            let ItemInputSelected = $(this).find("input").val()
                                                             $(selectedPropertyWayChop).removeClass("activeProduct-property-chopping")
                                                             $(selectedPropertyWayChop)
                                                               .find("span")
                                                               .removeClass("activeProduct-property-chopping-child")
                                                            $(selectedPropertyWayChop).find("input").attr('checked',false)
                                                                
                                                              $(this).addClass("activeProduct-property-chopping")
                                                              $(this).find("span").first().addClass("activeProduct-property-chopping-child")
                                                              $(this).find("input").attr('checked',true)
                                                             $('#attributeIdWayCh').val(ItemInputSelected)
                                                           })
                                                         })
                                                         var temp = `<svg class="fill-secondaryAct stroke-secondaryAct stroke-2" width="14px" height="14px"
                                                                                                       viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
                                                                                                       <path
                                                                d="M480 128c0 8.188-3.125 16.38-9.375 22.62l-256 256C208.4 412.9 200.2 416 192 416s-16.38-3.125-22.62-9.375l-128-128C35.13 272.4 32 264.2 32 256c0-18.28 14.95-32 32-32c8.188 0 16.38 3.125 22.62 9.375L192 338.8l233.4-233.4C431.6 99.13 439.8 96 448 96C465.1 96 480 109.7 480 128z" />
                                                                                                   </svg>`
                                                       
                                                         selectedPropertyWayChopchildren.first().append(temp)
                                                         defaultProSelected = $(".propertyContent").first().text()
                                                         // $("#productProperty").text(defaultProSelected)
                                                         selectedPropertyWayChop.map(function (index, item) {
                                                           $(item).on("click", function () {
                                                             $(selectedPropertyWayChop).find("svg").remove()
                                                             $(item).children().children().append(temp)
                                                             // const selectedProWayChopItem = $(item).children().text()
                                                             // $("#productProperty").text(selectedProWayChopItem)
                                                           })
                                                         })
                      //////////////////////////////////////////////////////////// End of Additional Script             
                                    
                </script>
            }
                break;
            case AttributeControlType.Checkboxes:
            case AttributeControlType.ReadonlyCheckboxes:
            {
                <ul @(attribute.AttributeControlType == AttributeControlType.Checkboxes ? Html.Raw("data-attr=" + attribute.Id) : null) class="option-list">
                    @foreach (var attributeValue in attribute.Values)
                    {
                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                            attributeValue.Name :
                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text;
                        <li @(attribute.AttributeControlType == AttributeControlType.Checkboxes ? Html.Raw("data-attr-value=" + attributeValue.Id) : null)>
                            <input id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" @(attribute.AttributeControlType == AttributeControlType.ReadonlyCheckboxes ? Html.Raw(" disabled=\"disabled\"") : null)
                                   @(attributeValue.CustomerEntersQty ? Html.Raw($"onchange=\"showHideCheckboxQuantity('{controlId}_{attributeValue.Id}')\"") : null)/>
                            <label for="@(controlId)_@(attributeValue.Id)">@attributeName</label>

                            @if (attributeValue.CustomerEntersQty)
                            {
                                <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                    <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                    <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)"/>
                                    <script asp-location="Footer">
                                                        $(document).ready(function() {
                                                            showHideCheckboxQuantity('@(controlId)_@(attributeValue.Id)');
                                                        })
                                                    </script>
                                </div>
                            }
                        </li>
                    }
                </ul>
            }
                break;
            case AttributeControlType.TextBox:
            {
                <input name="@(controlId)" type="text" class="textbox" id="@(controlId)" value="@(attribute.DefaultValue)"/>
            }
                break;
            case AttributeControlType.MultilineTextbox:
            {
                <textarea cols="20" id="@(controlId)" name="@(controlId)">@(attribute.DefaultValue)</textarea>
            }
                break;
            case AttributeControlType.Datepicker:
            {
                <nop-date-picker asp-day-name="@(controlId + "_day")"
                                 asp-month-name="@(controlId + "_month")"
                                 asp-year-name="@(controlId + "_year")"
                                 asp-begin-year="@DateTime.UtcNow"
                                 asp-end-year="@DateTime.UtcNow.AddYears(catalogSettings.CountDisplayedYearsDatePicker)"
                                 asp-selected-date="@CommonHelper.ParseDate(attribute.SelectedYear, attribute.SelectedMonth, attribute.SelectedDay)"/>
            }
                break;
            case AttributeControlType.FileUpload:
            {
                Download download = null;
                if (!string.IsNullOrEmpty(attribute.DefaultValue))
                {
                    download = await downloadService.GetDownloadByGuidAsync(new Guid(attribute.DefaultValue));
                }

                                @* register CSS and JS *@
                <link rel="stylesheet" href="~/lib_npm/fine-uploader/fine-uploader/fine-uploader.min.css"/>
                <script asp-exclude-from-bundle="true" src="~/lib_npm/fine-uploader/jquery.fine-uploader/jquery.fine-uploader.min.js" asp-location="Footer"></script>

                //ex. ['jpg', 'jpeg', 'png', 'gif'] or []
                var allowedFileExtensions = string.Join(", ", attribute.AllowedFileExtensions.Select(x => "'" + x.Trim() + "'").ToList());

                if (download != null)
                {
                    <input id="@(controlId)" name="@(controlId)" type="hidden" value="@download.DownloadGuid"/>
                }
                else
                {
                    <input id="@(controlId)" name="@(controlId)" type="hidden"/>
                }

                                @*fine uploader container*@
                <div id="@(controlId)uploader"></div>
                                @*fine uploader template (keep it synchronized to \Content\fineuploader\templates\default.html)*@
                <script type="text/template" asp-location="Footer" id="@(controlId)-qq-template">
                                    <div class="qq-uploader-selector qq-uploader">
                                        <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                                            <span>@T("Common.FileUploader.DropFiles")</span>
                                        </div>
                                        <div class="qq-upload-button-selector qq-upload-button">
                                            <div>@T("Common.FileUploader.Upload")</div>
                                        </div>
                                        <span class="qq-drop-processing-selector qq-drop-processing">
                                            <span>@T("Common.FileUploader.Processing")</span>
                                            <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
                                        </span>
                                        <ul class="qq-upload-list-selector qq-upload-list">
                                            <li>
                                                <div class="qq-progress-bar-container-selector">
                                                    <div class="qq-progress-bar-selector qq-progress-bar"></div>
                                                </div>
                                                <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                                                <span class="qq-edit-filename-icon-selector qq-edit-filename-icon"></span>
                                                <span class="qq-upload-file-selector qq-upload-file"></span>
                                                <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                                                <span class="qq-upload-size-selector qq-upload-size"></span>
                                                <a class="qq-upload-cancel-selector qq-upload-cancel" href="#">@T("Common.FileUploader.Cancel")</a>
                                                <a class="qq-upload-retry-selector qq-upload-retry" href="#">@T("Common.FileUploader.Retry")</a>
                                                <a class="qq-upload-delete-selector qq-upload-delete" href="#">@T("Common.FileUploader.Delete")</a>
                                                <span class="qq-upload-status-text-selector qq-upload-status-text"></span>
                                            </li>
                                        </ul>
                                    </div>
                                </script>
                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $("#@(controlId)uploader").fineUploader({
                                            request: {
                                                endpoint: '@(Url.RouteUrl("UploadFileProductAttribute", new { attributeId = attribute.Id }))'
                                            },
                                            template: "@(controlId)-qq-template",
                                            multiple: false,
                                            validation: {
                                                allowedExtensions: [@Html.Raw(allowedFileExtensions)]
                                            }
                                        }).on("complete", function(event, id, name, responseJSON, xhr) {
                                            $("#@(controlId)").val(responseJSON.downloadGuid);
                                            if (responseJSON.success) {
                                                $("#@(controlId + "downloadurl")").html("<a href='" + responseJSON.downloadUrl + "'>@T("Common.FileUploader.DownloadUploadedFile")</a>");
                                                $("#@(controlId + "remove")").show();
                                            }
                                            if (responseJSON.message) {
                                                alert(responseJSON.message);
                                            }
                                        });

                                        $("#@(controlId + "remove")").on('click', function(e) {
                                            $("#@(controlId + "downloadurl")").html("");
                                            $("#@(controlId)").val('');
                                            $(this).hide();
                                        });
                                    });
                                </script>
                <div class="w-[70%] flex justify-center items-center gap-2">
                    <div class="download-voice" id="@(controlId + "downloadurl")">
                        @if (download != null)
                        {
                            <a
                                href="@(Url.Action("GetFileUpload", "Download", new { downloadId = download.DownloadGuid }))"
                                class="download-uploaded-file">
                                @T("Common.FileUploader.DownloadUploadedFile")
                            </a>
                        }
                    </div>
                    <div>
                        @if (download != null)
                        {
                            <a id="@(controlId + "remove")" class="remove-download-button remove-voice">@T("Common.FileUploader.RemoveDownload")</a>
                        }
                        else
                        {
                            <a id="@(controlId + "remove")" class="remove-download-button remove-voice" style="display: none;">@T("Common.FileUploader.RemoveDownload")</a>
                        }
                    </div>
                </div>
            }
                break;
            case AttributeControlType.ColorSquares:
            {
                <ul data-attr="@(attribute.Id)" class="option-list attribute-squares color-squares" id="color-squares-@(attribute.Id)">
                    @foreach (var attributeValue in attribute.Values)
                    {
                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                            attributeValue.Name :
                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, string.Empty).Text;
                        <li data-attr-value="@attributeValue.Id" @(attributeValue.IsPreSelected ? Html.Raw(" class=\"selected-value\"") : null)>
                            <label for="@(controlId)_@(attributeValue.Id)">
                                <span class="attribute-square-container" title="@attributeName">
                                    <span class="attribute-square" style="background-color:@(attributeValue.ColorSquaresRgb);">&nbsp;</span>
                                </span>
                                <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                       @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}')\"") : null)/>
                            </label>
                            <div class="tooltip-container">
                                <div class="not-available-text">@T("Products.ProductAttributes.NotAvailable")</div>
                            </div>
                        </li>
                    }
                </ul>
                foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                {
                    <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                        <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                        <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)"/>
                    </div>
                }
                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $('.attributes #color-squares-@(attribute.Id)').on('click', 'input', function(event) {
                                            $('.attributes #color-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                            $(this).closest('li').addClass('selected-value');
                                        });
                                        showHideRadioQuantity("@controlId");
                                    });
                                </script>
            }
                break;
            case AttributeControlType.ImageSquares:
            {
                <ul data-attr="@(attribute.Id)" class="option-list attribute-squares image-squares" id="image-squares-@(attribute.Id)">
                    @foreach (var attributeValue in attribute.Values)
                    {
                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                            attributeValue.Name :
                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, string.Empty).Text;
                        <li data-attr-value="@attributeValue.Id" @(attributeValue.IsPreSelected ? Html.Raw(" class=\"selected-value\"") : null)>
                            <label for="@(controlId)_@(attributeValue.Id)">
                                <span class="attribute-square-container">
                                    <span class="attribute-square" style="background: url('@(attributeValue.ImageSquaresPictureModel.ImageUrl)') 50% 50% no-repeat;">&nbsp;</span>
                                </span>
                                <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                       @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}', true)\"") : null)/>
                            </label>
                            <div class="tooltip-container">
                                <div class="tooltip-header">@attributeName</div>
                                <div class="tooltip-body">
                                    <img src="@(attributeValue.ImageSquaresPictureModel.FullSizeImageUrl)" alt="@attributeName"/>
                                </div>
                                <div class="not-available-text">@T("Products.ProductAttributes.NotAvailable")</div>
                            </div>
                        </li>
                    }
                </ul>
                foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                {
                    <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box">
                        <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                        <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)"/>
                    </div>
                }
                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $('.attributes #image-squares-@(attribute.Id)').on('click', 'input', function(event) {
                                            $('.attributes #image-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                            $(this).closest('li').addClass('selected-value');
                                        });
                                        showHideRadioQuantity("@controlId", true);
                                    });
                                </script>
            }
                break;
        }
        </dd>
        </div>

        <script src="~/Themes/Emporium/Content/scripts/startRecord.js" asp-location="Footer"></script>
        }
        else
        {
            <div class="w-full flex flex-col">
            <dd id="@($"{NopCatalogDefaults.ProductAttributePrefix}input_{attribute.Id}")">
        @switch (attribute.AttributeControlType)
        {
            case AttributeControlType.DropdownList:
            {
                @* <select data-attr="@(attribute.Id)" name="@(controlId)" id="@(controlId)" @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onchange=\"showHideDropdownQuantity('{controlId}')\"") : null)> *@
                @* <option value="0">@T("Products.ProductAttributes.DropdownList.DefaultItem")</option> *@
                @* @foreach (var attributeValue in attribute.Values) *@
                @* { *@
                @* var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ? *@
                @*            attributeValue.Name : *@
                @*             T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, *@
                @*                 attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text; *@
                @*          <option data-attr-value="@attributeValue.Id" selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeName</option> *@
                @* *@
                @*    } *@
                @*  </select> *@
                <input type="hidden" id="boxAttributeId" value="@(attribute.Id)"/>

                <div id="selectorWeightProperty" data-attr="@(attribute.Id)" class="selected-product-property flex flex-wrap items-center justify-start gap-4 lg:gap-3 mt-3 p-2"
                     data-attr="@(attribute.Id)" name="@(controlId)" id="@(controlId)" @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onchange=\"showHideDropdownQuantity('{controlId}')\"") : null)>
                    @foreach (var attributeValue in attribute.Values)
                    {
                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                            attributeValue.Name :
                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text;
                        <div class="flex items-center min-h-[35px] min-w-[90px] rounded-[40px] py-[5px]
                       px-[10px] cursor-pointer transition-all duration-200 border-[2px] border-solid border-borderPrimary"
                             data-attr-value="@attributeName" attr-id="@attributeValue.Id"
                             onclick="CartManager.changePriceByAttribute(@Model.Id,@(attribute.Id),@attributeValue.Id)">
                            <span class="checkSelected-Property flex items-center w-[20px] h-[20px] border-[1px] border-solid border-borderPrimary rounded-[40px]">
                                <span class="pr-[2px]">

                                </span>
                            </span>
                            <span id="attributename-@attributeValue.Id" class="propertyContent text-[13px] pr-1">
                                @attributeName
                            </span>
                        </div>
                        @* <div  id="radioItem"  *@
                        @*      class="flex items-center justify-center gap-2 border-[1px] border-solid border-zinc-300 rounded-[10px] p-2 text-[14px] cursor-pointer"> *@
                        @*     <input onclick="CartManager.changePriceByAttribute(@Model.Id,@(attribute.Id),@attributeValue.Id)"  type="radio" id="@attributeValue.Id" name="weightSelector" value="@attributeName" class="cursor-pointer">  *@
                        @*     <label for="@attributeValue.Id" class="cursor-pointer">@attributeName</label> *@
                        @*   </div> *@
                    }
                </div>
                <input type="hidden" id="attributeId"/>
                <input type="hidden" id="attrValue"/>

                foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                {
                    <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box">
                        <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                        <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)"/>
                    </div>
                }
                <script asp-location="Footer">
                let attributeIdElement = document.getElementById('attributeId')
                let attrValueElement = document.getElementById('attrValue')
                
                 let attrElement  = document.querySelectorAll('#selectorWeightProperty div')
                 attributeIdElement.value =  attrElement[0].getAttribute("attr-id") 
                 attrValueElement.value =  attrElement[0].getAttribute("data-attr-value")
              
                      attrElement.forEach((element)=>{
                          element.addEventListener("click",()=>{
                              let attributeId = element.getAttribute("attr-id")
                              let attrValue = element.getAttribute("data-attr-value")
                                  attributeIdElement.value =  attributeId  
                                  attrValueElement.value =  attrValue                           
                              })
                            
                          })
                          
                ////////////////////////////////////////////////////////////  Additional Script
                
                        // $(document).ready(function() {
                        //     showHideDropdownQuantity("@controlId");
                        // });
                        
                               const selectedProperty = $("div.selected-product-property div")
                                 const selectedPropertychildren = $(
                                   "div.selected-product-property div .checkSelected-Property span"
                                 )
                                 selectedProperty.removeClass("activeProduct-property")
                                 selectedProperty.first().addClass("activeProduct-property")
                                 selectedProperty.find("span").first().addClass("activeProduct-property-child")
                               
                                 $(selectedProperty).map(function (index, item) {
                                   $(item).on("click", function (e) {
                                     $(selectedProperty).removeClass("activeProduct-property")
                                     $(selectedProperty)
                                       .find("span")
                                       .removeClass("activeProduct-property-child")
                                     $(this).addClass("activeProduct-property")
                                     $(this).find("span").first().addClass("activeProduct-property-child")
                                   })
                                 })
                                 var temp = `<svg class="fill-secondary stroke-secondary stroke-2" width="14px" height="14px"
                                                                               viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
                                                                               <path
                                        d="M480 128c0 8.188-3.125 16.38-9.375 22.62l-256 256C208.4 412.9 200.2 416 192 416s-16.38-3.125-22.62-9.375l-128-128C35.13 272.4 32 264.2 32 256c0-18.28 14.95-32 32-32c8.188 0 16.38 3.125 22.62 9.375L192 338.8l233.4-233.4C431.6 99.13 439.8 96 448 96C465.1 96 480 109.7 480 128z" />
                                                                           </svg>`
                               
                                 selectedPropertychildren.first().append(temp)
                                 defaultProSelected = $(".propertyContent").first().text()
                                 $("#productProperty").text(defaultProSelected)
                                 selectedProperty.map(function (index, item) {
                                   $(item).on("click", function () {
                                     $(selectedProperty).find("svg").remove()
                                     $(item).children().children().append(temp)
                                     const selectedProItem = $(item).children().text()
                                     $("#productProperty").text(selectedProItem)
                                   })
                                 })
                //////////////////////////////////////////////////////////// End of Additional Script
               </script>
            }
                break;
            case AttributeControlType.RadioList:
            {
                // $$$$$$//////////////////////////////////////////////////////////////   Chopping Selector

                <input type="hidden" id="boxChoppingAttributeId" value="@(attribute.Id)"/>

                <div id="selectorWayChProperty" data-attr="@(attribute.Id)" class="selected-wayofChop-property flex flex-wrap items-center justify-start gap-4 lg:gap-3 mt-3 p-2"
                     data-attr="@(attribute.Id)" name="@(controlId)" id="@(controlId)" @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onchange=\"showHideDropdownQuantity('{controlId}')\"") : null)>
                    @* <ul id="selectorWayChProperty" data-attr="@(attribute.Id)" class="option-list flex flex-col justify-center items-start gap-[17px] px-[10px]"> *@
                    @foreach (var attributeValue in attribute.Values)
                    {
                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                            attributeValue.Name :
                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text;
                        <div onclick="CartManager.getShoppingCartData()" class="flex items-center min-h-[35px] min-w-[90px] rounded-[40px] py-[5px]
                       px-[10px] cursor-pointer transition-all duration-200 border-[2px] border-solid border-borderPrimary"
                             data-attr-value="@attributeValue.Id" attr-id="@attributeValue.Id">
                            @* <li data-attr-value="@attributeValue.Id"> *@
                            <span class="checkSelected-Property flex items-center w-[20px] h-[20px] border-[1px] border-solid border-borderPrimary rounded-[40px]">
                                <span class="pr-[2px]">

                                </span>
                            </span>
                            <span id="chopAttrId-@attributeValue.Id" class="propertyContent text-[13px] pr-1">
                                @attributeName
                            </span>
                            <input hidden id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                   @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}')\"") : null)/>
                            @* <label hidden for="@(controlId)_@(attributeValue.Id)">@attributeName</label> *@

                            @if (attributeValue.CustomerEntersQty)
                            {
                                <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                    <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                    <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)"/>
                                </div>
                            }
                            @* </li> *@
                        </div>
                    }
                </div>
                <input type="hidden" id="attributeIdWayCh"/>
                <input type="hidden" id="attrValueWayCh"/>

                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        showHideRadioQuantity("@controlId");
                                    });
                ////////////////////////////////////////// Chopping Scripts
                        ////////////////////////////////////////////////////////////  Additional Script
                                        
                                                // $(document).ready(function() {
                                                //     showHideDropdownQuantity("@controlId");
                                                // });
                                                
                                                       const selectedPropertyWayChop = $("div.selected-wayofChop-property div")
                                                         const selectedPropertyWayChopchildren = $(
                                                           "div.selected-wayofChop-property div .checkSelected-Property span"
                                                         )
                                                         selectedPropertyWayChop.removeClass("activeProduct-property-chopping")
                                                         selectedPropertyWayChop.first().addClass("activeProduct-property-chopping")
                                                         selectedPropertyWayChop.find("span").first().addClass("activeProduct-property-chopping-child")
                                                         selectedPropertyWayChop.find("input").first().attr('checked',true)
                                                         
                                                           let firstItemInputSelected = selectedPropertyWayChop.find("input").first().val()
                                                           
                                                           $('#attributeIdWayCh').val(firstItemInputSelected)
                                                           // $('#attrValueWayCh').val(firstItemlabelSelected)
                                                           
                                                            // console.log($('#attributeIdWayCh').val())
                                                           
                                                         $(selectedPropertyWayChop).map(function (index, item) {
                                                           $(item).on("click", function (e) {
                                                            let ItemInputSelected = $(this).find("input").val()
                                                             $(selectedPropertyWayChop).removeClass("activeProduct-property-chopping")
                                                             $(selectedPropertyWayChop)
                                                               .find("span")
                                                               .removeClass("activeProduct-property-chopping-child")
                                                            $(selectedPropertyWayChop).find("input").attr('checked',false)
                                                                
                                                              $(this).addClass("activeProduct-property-chopping")
                                                              $(this).find("span").first().addClass("activeProduct-property-chopping-child")
                                                              $(this).find("input").attr('checked',true)
                                                             $('#attributeIdWayCh').val(ItemInputSelected)
                                                           })
                                                         })
                                                         var temp = `<svg class="fill-secondaryAct stroke-secondaryAct stroke-2" width="14px" height="14px"
                                                                                                       viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
                                                                                                       <path
                                                                d="M480 128c0 8.188-3.125 16.38-9.375 22.62l-256 256C208.4 412.9 200.2 416 192 416s-16.38-3.125-22.62-9.375l-128-128C35.13 272.4 32 264.2 32 256c0-18.28 14.95-32 32-32c8.188 0 16.38 3.125 22.62 9.375L192 338.8l233.4-233.4C431.6 99.13 439.8 96 448 96C465.1 96 480 109.7 480 128z" />
                                                                                                   </svg>`
                                                       
                                                         selectedPropertyWayChopchildren.first().append(temp)
                                                         defaultProSelected = $(".propertyContent").first().text()
                                                         // $("#productProperty").text(defaultProSelected)
                                                         selectedPropertyWayChop.map(function (index, item) {
                                                           $(item).on("click", function () {
                                                             $(selectedPropertyWayChop).find("svg").remove()
                                                             $(item).children().children().append(temp)
                                                             // const selectedProWayChopItem = $(item).children().text()
                                                             // $("#productProperty").text(selectedProWayChopItem)
                                                           })
                                                         })
                      //////////////////////////////////////////////////////////// End of Additional Script             
                                    
                </script>
            }
                break;
            case AttributeControlType.Checkboxes:
            case AttributeControlType.ReadonlyCheckboxes:
            {
                <ul @(attribute.AttributeControlType == AttributeControlType.Checkboxes ? Html.Raw("data-attr=" + attribute.Id) : null) class="option-list">
                    @foreach (var attributeValue in attribute.Values)
                    {
                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                            attributeValue.Name :
                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text;
                        <li @(attribute.AttributeControlType == AttributeControlType.Checkboxes ? Html.Raw("data-attr-value=" + attributeValue.Id) : null)>
                            <input id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" @(attribute.AttributeControlType == AttributeControlType.ReadonlyCheckboxes ? Html.Raw(" disabled=\"disabled\"") : null)
                                   @(attributeValue.CustomerEntersQty ? Html.Raw($"onchange=\"showHideCheckboxQuantity('{controlId}_{attributeValue.Id}')\"") : null)/>
                            <label for="@(controlId)_@(attributeValue.Id)">@attributeName</label>

                            @if (attributeValue.CustomerEntersQty)
                            {
                                <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                    <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                    <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)"/>
                                    <script asp-location="Footer">
                                                        $(document).ready(function() {
                                                            showHideCheckboxQuantity('@(controlId)_@(attributeValue.Id)');
                                                        })
                                                    </script>
                                </div>
                            }
                        </li>
                    }
                </ul>
            }
                break;
            case AttributeControlType.TextBox:
            {
                <input name="@(controlId)" type="text" class="textbox" id="@(controlId)" value="@(attribute.DefaultValue)"/>
            }
                break;
            case AttributeControlType.MultilineTextbox:
            {
                <textarea cols="20" id="@(controlId)" name="@(controlId)">@(attribute.DefaultValue)</textarea>
            }
                break;
            case AttributeControlType.Datepicker:
            {
                <nop-date-picker asp-day-name="@(controlId + "_day")"
                                 asp-month-name="@(controlId + "_month")"
                                 asp-year-name="@(controlId + "_year")"
                                 asp-begin-year="@DateTime.UtcNow"
                                 asp-end-year="@DateTime.UtcNow.AddYears(catalogSettings.CountDisplayedYearsDatePicker)"
                                 asp-selected-date="@CommonHelper.ParseDate(attribute.SelectedYear, attribute.SelectedMonth, attribute.SelectedDay)"/>
            }
                break;
            case AttributeControlType.FileUpload:
            {
                Download download = null;
                if (!string.IsNullOrEmpty(attribute.DefaultValue))
                {
                    download = await downloadService.GetDownloadByGuidAsync(new Guid(attribute.DefaultValue));
                }

                                @* register CSS and JS *@
                <link rel="stylesheet" href="~/lib_npm/fine-uploader/fine-uploader/fine-uploader.min.css"/>
                <script asp-exclude-from-bundle="true" src="~/lib_npm/fine-uploader/jquery.fine-uploader/jquery.fine-uploader.min.js" asp-location="Footer"></script>

                //ex. ['jpg', 'jpeg', 'png', 'gif'] or []
                var allowedFileExtensions = string.Join(", ", attribute.AllowedFileExtensions.Select(x => "'" + x.Trim() + "'").ToList());

                if (download != null)
                {
                    <input id="@(controlId)" name="@(controlId)" type="hidden" value="@download.DownloadGuid"/>
                }
                else
                {
                    <input id="@(controlId)" name="@(controlId)" type="hidden"/>
                }

                                @*fine uploader container*@
                <div id="@(controlId)uploader"></div>
                                @*fine uploader template (keep it synchronized to \Content\fineuploader\templates\default.html)*@
                <script type="text/template" asp-location="Footer" id="@(controlId)-qq-template">
                                    <div class="qq-uploader-selector qq-uploader">
                                        <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                                            <span>@T("Common.FileUploader.DropFiles")</span>
                                        </div>
                                        <div class="qq-upload-button-selector qq-upload-button">
                                            <div>@T("Common.FileUploader.Upload")</div>
                                        </div>
                                        <span class="qq-drop-processing-selector qq-drop-processing">
                                            <span>@T("Common.FileUploader.Processing")</span>
                                            <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
                                        </span>
                                        <ul class="qq-upload-list-selector qq-upload-list">
                                            <li>
                                                <div class="qq-progress-bar-container-selector">
                                                    <div class="qq-progress-bar-selector qq-progress-bar"></div>
                                                </div>
                                                <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                                                <span class="qq-edit-filename-icon-selector qq-edit-filename-icon"></span>
                                                <span class="qq-upload-file-selector qq-upload-file"></span>
                                                <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                                                <span class="qq-upload-size-selector qq-upload-size"></span>
                                                <a class="qq-upload-cancel-selector qq-upload-cancel" href="#">@T("Common.FileUploader.Cancel")</a>
                                                <a class="qq-upload-retry-selector qq-upload-retry" href="#">@T("Common.FileUploader.Retry")</a>
                                                <a class="qq-upload-delete-selector qq-upload-delete" href="#">@T("Common.FileUploader.Delete")</a>
                                                <span class="qq-upload-status-text-selector qq-upload-status-text"></span>
                                            </li>
                                        </ul>
                                    </div>
                                </script>
                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $("#@(controlId)uploader").fineUploader({
                                            request: {
                                                endpoint: '@(Url.RouteUrl("UploadFileProductAttribute", new { attributeId = attribute.Id }))'
                                            },
                                            template: "@(controlId)-qq-template",
                                            multiple: false,
                                            validation: {
                                                allowedExtensions: [@Html.Raw(allowedFileExtensions)]
                                            }
                                        }).on("complete", function(event, id, name, responseJSON, xhr) {
                                            $("#@(controlId)").val(responseJSON.downloadGuid);
                                            if (responseJSON.success) {
                                                $("#@(controlId + "downloadurl")").html("<a href='" + responseJSON.downloadUrl + "'>@T("Common.FileUploader.DownloadUploadedFile")</a>");
                                                $("#@(controlId + "remove")").show();
                                            }
                                            if (responseJSON.message) {
                                                alert(responseJSON.message);
                                            }
                                        });

                                        $("#@(controlId + "remove")").on('click', function(e) {
                                            $("#@(controlId + "downloadurl")").html("");
                                            $("#@(controlId)").val('');
                                            $(this).hide();
                                        });
                                    });
                                </script>
                <div class="w-[70%] flex justify-center items-center gap-2">
                    <div class="download-voice" id="@(controlId + "downloadurl")">
                        @if (download != null)
                        {
                            <a
                                href="@(Url.Action("GetFileUpload", "Download", new { downloadId = download.DownloadGuid }))"
                                class="download-uploaded-file">
                                @T("Common.FileUploader.DownloadUploadedFile")
                            </a>
                        }
                    </div>
                    <div>
                        @if (download != null)
                        {
                            <a id="@(controlId + "remove")" class="remove-download-button remove-voice">@T("Common.FileUploader.RemoveDownload")</a>
                        }
                        else
                        {
                            <a id="@(controlId + "remove")" class="remove-download-button remove-voice" style="display: none;">@T("Common.FileUploader.RemoveDownload")</a>
                        }
                    </div>
                </div>
            }
                break;
            case AttributeControlType.ColorSquares:
            {
                <ul data-attr="@(attribute.Id)" class="option-list attribute-squares color-squares" id="color-squares-@(attribute.Id)">
                    @foreach (var attributeValue in attribute.Values)
                    {
                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                            attributeValue.Name :
                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, string.Empty).Text;
                        <li data-attr-value="@attributeValue.Id" @(attributeValue.IsPreSelected ? Html.Raw(" class=\"selected-value\"") : null)>
                            <label for="@(controlId)_@(attributeValue.Id)">
                                <span class="attribute-square-container" title="@attributeName">
                                    <span class="attribute-square" style="background-color:@(attributeValue.ColorSquaresRgb);">&nbsp;</span>
                                </span>
                                <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                       @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}')\"") : null)/>
                            </label>
                            <div class="tooltip-container">
                                <div class="not-available-text">@T("Products.ProductAttributes.NotAvailable")</div>
                            </div>
                        </li>
                    }
                </ul>
                foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                {
                    <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                        <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                        <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)"/>
                    </div>
                }
                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $('.attributes #color-squares-@(attribute.Id)').on('click', 'input', function(event) {
                                            $('.attributes #color-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                            $(this).closest('li').addClass('selected-value');
                                        });
                                        showHideRadioQuantity("@controlId");
                                    });
                                </script>
            }
                break;
            case AttributeControlType.ImageSquares:
            {
                <ul data-attr="@(attribute.Id)" class="option-list attribute-squares image-squares" id="image-squares-@(attribute.Id)">
                    @foreach (var attributeValue in attribute.Values)
                    {
                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                            attributeValue.Name :
                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, string.Empty).Text;
                        <li data-attr-value="@attributeValue.Id" @(attributeValue.IsPreSelected ? Html.Raw(" class=\"selected-value\"") : null)>
                            <label for="@(controlId)_@(attributeValue.Id)">
                                <span class="attribute-square-container">
                                    <span class="attribute-square" style="background: url('@(attributeValue.ImageSquaresPictureModel.ImageUrl)') 50% 50% no-repeat;">&nbsp;</span>
                                </span>
                                <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                       @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}', true)\"") : null)/>
                            </label>
                            <div class="tooltip-container">
                                <div class="tooltip-header">@attributeName</div>
                                <div class="tooltip-body">
                                    <img src="@(attributeValue.ImageSquaresPictureModel.FullSizeImageUrl)" alt="@attributeName"/>
                                </div>
                                <div class="not-available-text">@T("Products.ProductAttributes.NotAvailable")</div>
                            </div>
                        </li>
                    }
                </ul>
                foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                {
                    <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box">
                        <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                        <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)"/>
                    </div>
                }
                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $('.attributes #image-squares-@(attribute.Id)').on('click', 'input', function(event) {
                                            $('.attributes #image-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                            $(this).closest('li').addClass('selected-value');
                                        });
                                        showHideRadioQuantity("@controlId", true);
                                    });
                                </script>
            }
                break;
        }
        </dd>
        </div>
        }
        
    }
    </dl>

    <script asp-location="Footer">
            function showHideDropdownQuantity(id) {
                $('select[name=' + id + '] > option').each(function () {
                    $('#' + id + '_' + this.value + '_qty_box').hide();
                });
                $('#' + id + '_' + $('select[name=' + id + '] > option:selected').val() + '_qty_box').css('display', 'inline-block');
            }

            function showHideRadioQuantity(id) {
                $('input[name=' + id + ']:radio').each(function () {
                    $('#' + $(this).attr('id') + '_qty_box').hide();
                });
                $('#' + id + '_' + $('input[name=' + id + ']:radio:checked').val() + '_qty_box').css('display', 'inline-block');
            }

            function showHideCheckboxQuantity(id) {
                if ($('#' + id).is(':checked'))
                    $('#' + id + '_qty_box').css('display', 'inline-block');
                else
                    $('#' + id + '_qty_box').hide();
            }
            ///////////////////////////////////////////////////
            
        </script>
    </div>

    if (Model.AllowAddingOnlyExistingAttributeCombinations && catalogSettings.AttributeValueOutOfStockDisplayType == AttributeValueOutOfStockDisplayType.Disable)
    {
        <script src="~/js/public.combinationsbehavior.js" asp-location="Footer"></script>

        <script asp-location="Footer">
            var combinationsBehavior_@(Model.Id);
            $(document).ready(function () {
                combinationsBehavior_@(Model.Id) = createCombinationsBehavior({
                    contentEl: '[data-productid="@Model.Id"]',
                    fetchUrl: '@Html.Raw(Url.RouteUrl("GetProductCombinations", new { productId = Model.Id }))'
                });
                combinationsBehavior_@(Model.Id).init();
            });
        </script>
    }

    //dynamic update support
    @* var attributesHaveConditions = Model.ProductAttributes.Any(x => x.HasCondition); *@
    @* var attributesHaveAssociatedPictures = Model.ProductAttributes.Any(x => x.ProductId > 0); *@
    @* var attributeChangeScriptsBuilder = new StringBuilder(); *@
    @* var attributeChangeHandlerFuncName = $"attribute_change_handler_{Model.Id}"; *@
    @* if (catalogSettings.AjaxProcessAttributeChange) *@
    @* { *@
    @*     if (Model.AllowAddingOnlyExistingAttributeCombinations && catalogSettings.AttributeValueOutOfStockDisplayType == AttributeValueOutOfStockDisplayType.Disable) *@
    @*     { *@
    @*         <script asp-location="Footer"> *@
    @*             $(document).ready(function () { *@
    @*                 $(combinationsBehavior_@(Model.Id)).on('processed', function () { *@
    @*                     @(attributeChangeHandlerFuncName)(); *@
    @*                 }); *@
    @*             }); *@
    @*         </script> *@
    @*     } *@
    @*     else *@
    @*     { *@
    @*         //generate change event script *@
    @*         foreach (var attribute in Model.ProductAttributes) *@
    @*         { *@
    @*             var controlId = $"{NopCatalogDefaults.ProductAttributePrefix}{attribute.Id}"; *@
    @*             switch (attribute.AttributeControlType) *@
    @*             { *@
    @*                 case AttributeControlType.DropdownList: *@
    @*                     { *@
    @*                         attributeChangeScriptsBuilder.AppendFormat("$('#{0}').on('change', function(){{{1}();}});\n", controlId, attributeChangeHandlerFuncName); *@
    @*                     } *@
    @*                     break; *@
    @*                 case AttributeControlType.RadioList: *@
    @*                 case AttributeControlType.ColorSquares: *@
    @*                 case AttributeControlType.ImageSquares: *@
    @*                     { *@
    @*                         foreach (var attributeValue in attribute.Values) *@
    @*                         { *@
    @*                             attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').on('click', function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName); *@
    @*                         } *@
    @*                     } *@
    @*                     break; *@
    @*                 case AttributeControlType.Checkboxes: *@
    @*                 case AttributeControlType.ReadonlyCheckboxes: *@
    @*                     { *@
    @*                         foreach (var attributeValue in attribute.Values) *@
    @*                         { *@
    @*                             attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').on('click', function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName); *@
    @*                         } *@
    @*                     } *@
    @*                     break; *@
    @*                 default: *@
    @*                     break; *@
    @*             } *@
    @*         } *@
    @*     } *@
    @* *@
    @*     foreach (var attribute in Model.ProductAttributes) *@
    @*     { *@
    @*         foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty)) *@
    @*         { *@
    @*             var controlId = $"{NopCatalogDefaults.ProductAttributePrefix}{attribute.Id}"; *@
    @*             attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}_qty').on('input propertychange paste', function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName); *@
    @*         } *@
    @*     } *@
    @* *@
    @*     //render scripts *@
    @*     //almost the same implementation is used in the \Views\Product\_RentalInfo.cshtml file *@
    @*     <script asp-location="Footer"> *@
    @*         function @(attributeChangeHandlerFuncName)() { *@
    @*             $.ajax({ *@
    @*                 cache: false, *@
    @*                 url: "@Html.Raw(Url.Action("productdetails_attributechange", "shoppingcart", new { productId = Model.Id, validateAttributeConditions = attributesHaveConditions, loadPicture = attributesHaveAssociatedPictures }))", *@
    @*                 data: $('#product-details-form').serialize(), *@
    @*                 type: "POST", *@
    @*                 success: function (data, textStatus, jqXHR) { *@
    @*                     if (data.price) { *@
    @*                         $('.price-value-@Model.Id').text(data.price); *@
    @*                     } *@
    @*                     if (data.basepricepangv) { *@
    @*                         $('#base-price-pangv-@Model.Id').text(data.basepricepangv); *@
    @*                     } else { *@
    @*                         $('#base-price-pangv-@Model.Id').hide(); *@
    @*                     } *@
    @*                     if (data.sku) { *@
    @*                         $('#sku-@Model.Id').text(data.sku).parent(".sku").show(); *@
    @*                     } else { *@
    @*                         $('#sku-@Model.Id').parent(".sku").hide(); *@
    @*                     } *@
    @*                     if (data.mpn) { *@
    @*                         $('#mpn-@Model.Id').text(data.mpn).parent(".manufacturer-part-number").show(); *@
    @*                     } else { *@
    @*                         $('#mpn-@Model.Id').parent(".manufacturer-part-number").hide(); *@
    @*                     } *@
    @*                     if (data.gtin) { *@
    @*                         $('#gtin-@Model.Id').text(data.gtin).parent(".gtin").show(); *@
    @*                     } else { *@
    @*                         $('#gtin-@Model.Id').parent(".gtin").hide(); *@
    @*                     } *@
    @*                     if (data.stockAvailability) { *@
    @*                         $('#stock-availability-value-@Model.Id').text(data.stockAvailability); *@
    @*                     } *@
    @*                     if (data.enabledattributemappingids) { *@
    @*                         for (var i = 0; i < data.enabledattributemappingids.length; i++) { *@
    @*                             $('#@(NopCatalogDefaults.ProductAttributePrefix)label_' + data.enabledattributemappingids[i]).show(); *@
    @*                             $('#@(NopCatalogDefaults.ProductAttributePrefix)input_' + data.enabledattributemappingids[i]).show(); *@
    @*                         } *@
    @*                     } *@
    @*                     if (data.disabledattributemappingids) { *@
    @*                         for (var i = 0; i < data.disabledattributemappingids.length; i++) { *@
    @*                             $('#@(NopCatalogDefaults.ProductAttributePrefix)label_' + data.disabledattributemappingids[i]).hide(); *@
    @*                             $('#@(NopCatalogDefaults.ProductAttributePrefix)input_' + data.disabledattributemappingids[i]).hide(); *@
    @*                         } *@
    @*                     } *@
    @*                     if (data.pictureDefaultSizeUrl) { *@
    @*                         $('#main-product-img-@Model.Id').attr("src", data.pictureDefaultSizeUrl); *@
    @*                     } *@
    @*                     if (data.pictureFullSizeUrl) { *@
    @*                         $('#main-product-img-lightbox-anchor-@Model.Id').attr("href", data.pictureFullSizeUrl); *@
    @*                     } *@
    @*                     if (data.message) { *@
    @*                         alert(data.message); *@
    @*                     } *@
    @*                     $(document).trigger({ type: "product_attributes_changed", changedData: data }); *@
    @*                 } *@
    @*             }); *@
    @*         } *@
    @*         $(document).ready(function() { *@
    @*             @(attributeChangeHandlerFuncName)(); *@
    @*             @Html.Raw(attributeChangeScriptsBuilder.ToString()) *@
    @*         }); *@
    @*     </script> *@
    @* } *@
}