@model ProductDetailsModel.AddToCartModel
@using Nop.Core.Domain.Orders
@{
    var addtocartlink = Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart });
}

<div data-productid="@Model.ProductId">
    <div>
        <nop-antiforgery-token/>
        @if (!Model.DisableBuyButton)
        {

            {
                var addToCartText = "";
                if (Model.UpdatedShoppingCartItemId > 0 && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
                {
                    addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                }
                else
                {
                    addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                }
                <div class="purchaseBtn mt-3 w-full">
                    <button class="h-[43px] addToCard-button"
                            data-productid="@Model.ProductId"
                            id="add-to-cart-button-@Model.ProductId"
                            onclick="CartManager.productAddToCartAsync('@addtocartlink', @Model.ProductId)">
                        @addToCartText
                    </button>
                    <div class="addToCard inVisibleElement">
                        <button class="addToCard-plus p-1" data-productid="@Model.ProductId" id="add-to-cart-button-@Model.ProductId"
                                onclick="CartManager.productAddToCartAsync('@addtocartlink', @Model.ProductId);">
                            <svg class="fill-textPrimary stroke-textPrimary stroke-[2px]" height="30px"
                                 width="30px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                                <title/>
                                <g id="plus">
                                    <line class="cls-1" x1="16" x2="16" y1="7" y2="25"/>
                                    <line class="cls-1" x1="7" x2="25" y1="16" y2="16"/>
                                </g>
                            </svg>
                        </button>


                        <div class="addToCard-counter" id="count"></div>
                        <button class="AddToCardProduct-status" data-productid="@Model.ProductId"
                                id="add-to-cart-button-@Model.ProductId" onclick="CartManager.updateCartItem(@Model.ProductId);">
                        </button>
                    </div>
                    <input type="hidden" id="cartId"/>
                    <input type="hidden" id="productId"/>
                    <input type="hidden" id="productCount"/>

                </div>
            }
        }
        else
        {
            <div class="outOfStock">
                کالا موجود نیست
            </div>
              @* @Model.CustomerEntersPrice *@
        }
    </div>
</div>

<script asp-location="Footer">
'use strict'

const HTTP_METHODS = { POST: 'POST', GET: 'GET' }
const PRODUCT_ATTRIBUTES = { 
    EnteredQuantity: 1,
    Title: '',
    ReviewText: '', 
    Rating: 5,
    FullName: '',
    Email: '',
    Enquiry: ''
}

class ErrorHandler {
  static logAndThrow(error, message = 'Error') {
    console.error(`${message}:`, error)
    throw error
  }
}

class RequestHandler {
  static buildHeaders(method) {
    const contentTypes = {
      [HTTP_METHODS.POST]: 'application/json',
    }
    return { 'Content-Type': contentTypes[method] }
  }

  static generateRequestOptions(method, data) {
    const headers = this.buildHeaders(method);
    const body = data ? JSON.stringify(data) : null;
    return { method, headers, body };
  }

  static async requestContentFrom(url, method, data = null) {
    const options = this.generateRequestOptions(method, data);
    try {
      const response = await fetch(url, options);
      if (method === 'GET'){
             return response.json();
       } else{
             return response
       }
    } catch (error) {
      ErrorHandler.logAndThrow(error, 'Fetch Error');
    }
  }
}

class Util {
  static getIdValue(id) {
      if (document.getElementById(id).value){      
                return parseInt(document.getElementById(id).value)
      }
  }

  static checkSubProductFlag() {
    return !!document.getElementById("product_attribute_3")?.value
  }
}

class DOMManager {
  static getElementById(id) {
    return document.getElementById(id);
  }

  static getElementsBySelector(selector) {
    return document.querySelectorAll(selector);
  }

  static addClass(element, className) {
    element.classList.add(className);
  }

  static removeClass(element, className) {
    element.classList.remove(className);
  }

  static setElementPadding(element, padding) {
    element.style.padding = padding;
  }

  static setElementInnerText(element, text) {
    element.innerText = text;
  }

  static setElementInnerHTML(element, html) {
    element.innerHTML = html;
  }
}

class CartManager {
  static getAttributeProperty = () => {
        if (childs.AttributeInfo !== ''){
                        const getElementId = document.getElementById('attributeId').value
                      const element = document.getElementById(`attributename-${getElementId}`).innerText
                           let vazn = "وزن: " + element.replace(' ','')
                       if (childs.AttributeInfo === vazn){
                               
                       }   
                    }
      }
      
  static productAddToCartAsync = async (url, productId) => {
      const addToCartBox = document.getElementById("addToCartBox");
      
     let boxAttributeId = document.getElementById('boxAttributeId')
     let boxWayofChopAttrId = document.getElementById('boxChoppingAttributeId')
     
      let attributeId = document.getElementById("attributeId")
      let attrValue = document.getElementById("attrValue")
       
       let wayofChopAttrId = document.getElementById("attributeIdWayCh")
       
       
          let productData = ''
          let boxAttributeIdString = null
          let boxWayofChopAttrIdString = null
          let attributeIdInt = 0   
          let wayofChopAttrIdInt = 0 
          let attrValueInt = null
             
         if (boxAttributeId !== null || boxWayofChopAttrId !== null){  
           if (attributeId !== null && attrValue !== null){
                 attrValueInt =  attrValue.value
                 attributeIdInt = parseInt(attributeId.value)
              }
            if (wayofChopAttrId !== null){
                 wayofChopAttrIdInt = parseInt(wayofChopAttrId.value)
                 boxWayofChopAttrIdString = boxWayofChopAttrId.value
             }
                 boxAttributeIdString = boxAttributeId.value
                 
           } 
           
           if (attributeIdInt === 0 && attrValueInt === null){
               productData = {
                     ProductId: productId,
                     ...PRODUCT_ATTRIBUTES,
                     }                     
                   }
                   else{
                         productData = {
                           [`product_attribute_${boxAttributeIdString}`] : attributeIdInt,
                            [`addtocart_${productId}.EnteredQuantity`] : 1,
                            'EnteredQuantity' : 1,
                             ...PRODUCT_ATTRIBUTES,
                                 }
                             }
                           if (wayofChopAttrIdInt !== 0) {
                                productData = {...productData,
                             [`product_attribute_${boxWayofChopAttrIdString}`] : wayofChopAttrIdInt,
                                   }
                       }
     
     addAntiForgeryToken(productData)
     await $.ajax({
                    url: url,
                    type: "POST",
                    data: productData
                });
     
     // let response =  await RequestHandler.requestContentFrom(url, HTTP_METHODS.POST, productData)
   
     await this.getUpdatedCartData()
    
  }

  static updateCartItem = async (productId) => {
    const counts = parseInt(document.getElementById("productCount").value)
    const idCart =parseInt(document.getElementById("cartId").value)
    let attrValue = document.getElementById("attrValueId")
    let attributeId = document.getElementById("attributeId")
    let cartContents = ''
    let attributeIdInt = 0    
    let attrValueInt = 0
    
    
    if (attributeId !== null && attrValue !== null){
       attrValueInt =  parseInt(attrValue.value)
       attributeIdInt = parseInt(attributeId.value)
    }
    
    
    if (counts > 1){
        if (attributeIdInt === 0 && attrValueInt === 0){
            cartContents =  [
                            {key:`addtocart_${productId}.EnteredQuantity`, value:counts -1},
                            {key:`itemquantity${idCart}`, value:counts -1},
                            {key:`addtocart_${productId}.UpdatedShoppingCartItemId`, value:idCart}
                          ]
        }
        else{
            cartContents =  [
                {key:`product_attribute_${productId}_3_${attributeId}`, value:attributeId},
                {key:`itemquantity${idCart}`, value:counts -1},
                {key:`addtocart_${productId}.EnteredQuantity`, value:counts},
                {key:`addtocart_${productId}.UpdatedShoppingCartItemId`, value:idCart}
              ]
          }
    }
    else {
        cartContents =  [
            { value: 0, key: "itemquantity1" },
            { value: `${idCart}`, key: "removefromcart" }
          ]
           document.getElementById("productCount").value= 0; 
    }
    
    await this.updateCartItems('/api/ShoppingCart/UpdateCart', cartContents);
    await this.getUpdatedCartData()
    // let response = await this.updateCartItems('/api/ShoppingCart/UpdateCart', cartContents);
    await ButtonsManager.UpdateCard()
  }

  static changePriceByAttribute = async (productId, attributeId,attributeValue) => {
    let data ={
        [`product_attribute_${attributeId}`]: attributeValue,
        [`addtocart_${productId}.EnteredQuantity`]: 1,
        "AddProductReview.Title": '',
        "AddProductReview.ReviewText": '' ,
        "AddProductReview.Rating": 5
    }
    addAntiForgeryToken(data);
    try {
      const fullUrl = `${window.location.origin}/shoppingcart/productdetails_attributechange?productId=${productId}&validateAttributeConditions=False&loadPicture=True`;
      let response = await $.ajax({
                          url: fullUrl,
                          type: "POST",
                          data: data
                      });
       const productPriceId = document.getElementById(`price-value-${productId}`)
       productPriceId.innerHTML = response.price
       
    } catch (error) {
      ErrorHandler.logAndThrow(error, 'Fetch Error');
    } finally {
      console.log("AJAX request complete");
      this.getUpdatedCartData()
    }
  }
  
  static getUpdatedCartData = async () => {
    // return await RequestHandler.requestContentFrom('/api/ShoppingCart', HTTP_METHODS.GET)
    
    let addtoCartCounter = document.getElementById('productCount')
    let productMaxQuantity = 0
   let response =  await RequestHandler.requestContentFrom('/api/ShoppingCart', HTTP_METHODS.GET)
     let cartItems = response.Items
                // var productAvailable = false
                let cartCount = response.Count
                if (cartItems.length !== 0){
                    let find = false
                          cartItems.map((childs) => {
                                      if (childs.ProductId === @Model.ProductId) {
                                          productMaxQuantity = childs.AllowedQuantities.length
                                           if (childs.AttributeInfo !== ''){
                                               /////////////////////////////////////// WayOfChop
                                                let result = childs.AttributeInfo.includes("<br />");
                                                   if (result){
                                                               let fields = childs.AttributeInfo.split('<br />');
                                                               let weightAmount = fields[0];
                                                               let chopMethod = fields[1];
                                                               
                                               /////////////////////////////////////////////////// weightAmount 
                                                    const getElementId = document.getElementById('attributeId').value
                                                            const element = document.getElementById(`attributename-${getElementId}`).innerText
                                                            
                                                                        let vazn = "وزن:" + element.replace(' ','').replace(' ','').replace(' ','').replace(' ','').replace(' ','').replace(' ','').replace(' ','')
                                                                        let vazn1 = weightAmount.replace(' ','').replace(' ','').replace(' ','').replace(' ','').replace(' ','').replace(' ','')
                                                                        
                                                                    if (vazn1 === vazn){
                                                                          let wayofChop = chopMethod.split(':');
                                                                          let chopAttrId = document.getElementById('attributeIdWayCh').value
                                                                         let chopAttrIdElement = document.getElementById(`chopAttrId-${chopAttrId}`).innerText
                                                                             let chopMethodAttr = wayofChop[1].replace(' ','')        
                                                                             let chopMethodAttr1 = chopAttrIdElement
                                                                              
                                                                             
                                                                                  if (chopMethodAttr === chopMethodAttr1){
                                                                                           document.getElementById('cartId').value = childs.Id
                                                                                        document.getElementById("productId").value= @Model.ProductId; 
                                                                                        document.getElementById("productCount").value= childs.Quantity; 
                                                                                        document.getElementById("count").innerHTML= childs.Quantity; 
                                                                                        find = true
                                                                                  }
                                                                       
                                                                     } 
                                                    
                                                     }
                                                   ///////////////////////////////////////////////////////////////
                                                 ///////////////////////////////////////////////
                                                 else {
                                                           const getElementId = document.getElementById('attributeId').value
                                                         const element = document.getElementById(`attributename-${getElementId}`).innerText
                                                              let vazn = "وزن:" + element.replace(' ','').replace(' ','')
                                                              let vazn1 = childs.AttributeInfo.replace(' ','').replace(' ','')
                                                          if (vazn1 === vazn){
                                                               document.getElementById('cartId').value = childs.Id
                                                               document.getElementById("productId").value= @Model.ProductId; 
                                                               document.getElementById("productCount").value= childs.Quantity; 
                                                               document.getElementById("count").innerHTML= childs.Quantity; 
                                                               find = true
                                                          }    
                                                          }
                                                         }
                                           else {
                                          find = true
                                                 document.getElementById('cartId').value = childs.Id
                                                 document.getElementById("productId").value= @Model.ProductId; 
                                                 document.getElementById("productCount").value= childs.Quantity; 
                                                 document.getElementById("count").innerHTML= childs.Quantity;        
                                             }  
                                      } 
                                    });
                                              if (!find) {
                                                   document.getElementById("productCount").value= 0; 
                                                   document.getElementById("count").innerHTML= 0;     
                                                            }
                               }
                            // ButtonsManager.productAddToCartStyle();
                            ButtonsManager.productAddToCartStyle();
                 ////////////////////////////////////////////////////////////// Disable AddToACartPlusBtn / Over MaxQuantity 
                if (productMaxQuantity === parseInt(addtoCartCounter.value)){
                    document.querySelector(".addToCard-plus").disabled = true;
                    const svgTag = document.querySelectorAll(".cls-1")
                    svgTag.forEach((element)=>{
                        element.classList.add('disableAddToCartPlus')
                    }) 
                }else if (productMaxQuantity !== parseInt(addtoCartCounter.value)){
                     document.querySelector(".addToCard-plus").disabled = false;
                         const svgTag = document.querySelectorAll(".cls-1")
                         svgTag.forEach((element)=>{
                         element.classList.remove('disableAddToCartPlus')
                       }) 
                  }
  }

  static updateCartItems = async (url, cartContents) => {
    return await RequestHandler.requestContentFrom(url, HTTP_METHODS.POST, cartContents)
  }
}


class ButtonsManager {
  static productAddToCartStyle = function () {
      let productCount = 0
      if (Util.getIdValue("productCount") === null ||  Util.getIdValue("productCount") === undefined ){
            productCount = 0
      } else {
                productCount = Util.getIdValue("productCount")
          }
    if (productCount < 1) {
      document.querySelector('.addToCard-button').classList.remove('inVisibleElement')
      Array.from(document.querySelectorAll("div.addToCard")).forEach(function(node) {
        node.classList.add('inVisibleElement')
      })
      DOMManager.setElementPadding(document.querySelector("button.AddToCardProduct-status"),"12px")
      let counterBox = document.querySelector(".addToCard-counter");
      DOMManager.setElementInnerText(counterBox,productCount ? productCount : 0)
       // document.querySelector(".AddToCardProduct-status").innerHTML = '<span class="trash-icon"></span>'
    } else if (productCount >= 1) {
      document.querySelector('.addToCard-button').classList.add('inVisibleElement')
      Array.from(document.querySelectorAll("div.addToCard")).forEach(function(node) {
        node.classList.remove('inVisibleElement')
      })
      DOMManager.setElementPadding(document.querySelector("button.AddToCardProduct-status"),"12px")
           ButtonsManager.addToCardPlus()
    }
  }

  static UpdateCard = function () {
    let productCount = Util.getIdValue("productCount")
     let counterBox = document.querySelector(".addToCard-counter");
         counterBox.innerHTML = productCount
     let counterBox_value = productCount;
    if (counterBox_value < 1) {
      document.querySelector('.addToCard-button').classList.remove('inVisibleElement');
      Array.from(document.querySelectorAll("div.addToCard")).forEach(function(node) {
        node.classList.add('inVisibleElement');
      });
      counterBox_value = 0;
      counterBox.innerText = counterBox_value;
      document.querySelector("button.AddToCardProduct-status").innerHTML = '';
    } else if (counterBox_value === 1) {
      document.querySelector("button.AddToCardProduct-status").innerHTML = '<span class="trash-icon"></span>';
      document.querySelector("button.AddToCardProduct-status").style.padding = "12px";
    }
  }

  static addToCardPlus = function () {
    let counterBox = document.querySelector(".addToCard-counter");
    let counterBox_value = parseInt(counterBox.innerText);

    if (counterBox_value === 1) {
      document.querySelector("button.AddToCardProduct-status").innerHTML = '<span class="trash-icon"></span>';
    } else if (counterBox_value > 1) {
      document.querySelector("button.AddToCardProduct-status").innerHTML = '<svg class="fill-textPrimary stroke-textPrimary stroke-0" height="25px" width="25px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M4 12C4 11.4477 4.44772 11 5 11H19C19.5523 11 20 11.4477 20 12C20 12.5523 19.5523 13 19 13H5C4.44772 13 4 12.5523 4 12Z" fill="currentColor" /></svg>'
      document.querySelector("button.AddToCardProduct-status").style.padding = "7px";
    }
  }
}

CartManager.getUpdatedCartData()

</script>