@model ProductOverviewModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration
@using LinqToDB.Common
@using Newtonsoft.Json.Linq;
@using DocumentFormat.OpenXml.InkML
@using DocumentFormat.OpenXml.Wordprocessing

@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject ISettingService settingService
@inject CatalogSettings catalogSettings
@inject IViewComponentSelector viewComponentSelector

@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;

    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId, quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId, quantity });
    }

    addtocartlink = Url.RouteUrl("AddProductToCart-Details", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart });

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;
    var picture = Model.PictureModels.FirstOrDefault();

    // addtocartlink = "https://localhost:5001/addproducttocart/details/82634/1";
}

<div class="product-item" data-productid="@Model.Id">

<!-- ////////////////////////////////// AddToCard -->
@* <div class="product-add-to-cart"> *@
@*     <button class="addToCard-minus-category"> *@
@*         <svg width="20px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"> *@
@*             <g> *@
@*                 <line stroke-width="3px" class="cls-1" x1="7" x2="25" y1="16" y2="16" /> *@
@*             </g> *@
@*         </svg> *@
@*     </button> *@
@*     <div id="addToCartCounter" class="add-to-cart-counter"></div> *@
@*     <button class="addToCard-plus-category"> *@
@*         <svg width="20px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"> *@
@*             <g> *@
@*                 <line stroke-width="3px" x1="16" x2="16" y1="7" y2="25" /> *@
@*                 <line stroke-width="3px" x1="7" x2="25" y1="16" y2="16" /> *@
@*             </g> *@
@*         </svg> *@
@*     </button> *@
@* </div> *@
<!-- //////////////////////////////////-->
@* class="picture" *@


@* style="background-image: url('{{@picture.ImageUrl}}');" *@
<div class="rounded-tr-2xl rounded-tl-2xl">
    <a href="@(Url.RouteUrl<Product>(new { Model.SeName }))" title="@picture.Title">
        <img class="rounded-tr-2xl rounded-tl-2xl h-[180px]" src="@picture.ImageUrl"
             alt="@picture.AlternateText" title="@picture.Title" loading="lazy"/>
    </a>

    @* <div class="btn-wrapper"> *@
    @*     @if (!Model.ProductPrice.DisableAddToCompareListButton) *@
    @*     { *@
    @*         <button type="button" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">@T("ShoppingCart.AddToCompareList")</button> *@
    @*     } *@
    @*     @if (!Model.ProductPrice.DisableWishlistButton) *@
    @*     { *@
    @*         <button type="button" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">@T("ShoppingCart.AddToWishlist")</button> *@
    @*     } *@
    @* </div> *@
</div>
<div class="details">
    <div class="product-title-limited">
        <h2 class="product-title">
            <a href="@(Url.RouteUrl<Product>(new { Model.SeName }))">@Model.Name</a>
        </h2>
    </div>
    @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
    {
        <div class="sku">
            @Model.Sku
        </div>
    }
    @* @if (Model.ReviewOverviewModel.AllowCustomerReviews) *@
    @* { *@
    @*     var ratingPercent = 0; *@
    @*     if (Model.ReviewOverviewModel.TotalReviews != 0) *@
    @*     { *@
    @*         ratingPercent = ((Model.ReviewOverviewModel.RatingSum*100)/Model.ReviewOverviewModel.TotalReviews)/5; *@
    @*     } *@
    @*     <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)"> *@
    @*         <div class="rating"> *@
    @*             <div style="width: @(ratingPercent)%"> *@
    @*             </div> *@
    @*         </div> *@
    @*     </div> *@
    @* } *@

    @* <div class="description"> *@
    @*     @Html.Raw(Model.ShortDescription) *@
    @* </div> *@
    <div class="add-info add-info-Price relative w-full">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
        @* prices *@
        <div class="flex flex-col gap-1 px-3 pt-3" style="text-align: center">
            @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))

            {
                    @* <span class="price old-price">@Model.ProductPrice.OldPrice</span> *@
            }


            @* <div> *@
            @*     <span class="price old-price"> *@
            @*         154,888 *@
            @*     </span> *@
            @*     <span class="text-textPrimary text-[9px] font-semibold"> *@
            @*         تومان *@
            @*     </span> *@
            @* </div> *@

            <span class="price actual-price">
                @string.Format("{0:N0}", Model.ProductPrice.PriceValue)
                <span class="priceToman">@T("ProductBox.PriceToman")</span>
            </span>
            @if (Model.ProductPrice.DisplayTaxShippingInfo)
            {
                var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <span class="tax-shipping-info">
                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))
                </span>
            }
            @* <div> *@
            @*     <span class="price old-price"> *@
            @*         12,888 *@
            @*     </span> *@
            @*     <span class="text-textPrimary text-[9px] font-semibold"> *@
            @*         تومان *@
            @*     </span> *@
            @* </div> *@
            @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <div class="base-price-pangv">
                    @Model.ProductPrice.BasePricePAngV
                </div>
            }
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
        <div class="pl-3">

            <nop-antiforgery-token/>
            @*<button type="button" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')">@T("Products.Details")</button>*@
            @if (!Model.ProductPrice.DisableBuyButton)
            {
                var addToCartText = T("ShoppingCart.AddToCart").Text;
                var data = "{\"addtocart_" + Model.Id + ".EnteredQuantity\": 1,\"AddProductReview.Title\": \"\",\"AddProductReview.ReviewText\":\"\",\"AddProductReview.Rating\": 5,\"FullName\": \"\",\"Email\": \"\",\"Email\": \"\",\"Enquiry\":\"\" }";

                ///////////////////////////////////////// AddToCard with Plus and Minus
                @*     <div class="product-add-to-cart"> *@
                @*         <button class="addToCard-minus-category" data-productid="@Model.Id" id="add-to-cart-button-@Model.Id" *@
                @*                 onclick="CartManager.productAddToCartAsync('@addtocartlink', @Model.Id)"> *@
                @*             <svg width="20px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"> *@
                @*                 <g> *@
                @*                     <line stroke-width="3px" class="cls-1" x1="7" x2="25" y1="16" y2="16" /> *@
                @*                 </g> *@
                @*             </svg> *@
                @*         </button> *@
                @*         <div id="addToCartCounter" class="add-to-cart-counter"></div> *@
                @*         <button class="addToCard-plus-category"> *@
                @*             <svg width="20px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"> *@
                @*                 <g> *@
                @*                     <line stroke-width="3px" x1="16" x2="16" y1="7" y2="25" /> *@
                @*                     <line stroke-width="3px" x1="7" x2="25" y1="16" y2="16" /> *@
                @*                 </g> *@
                @*             </svg> *@
                @*         </button> *@
                @*     </div> *@
                @* *@
                @* <input type="hidden" id="cartId"/> *@
                @* <input type="hidden" id="productId"/> *@
                @* <input type="hidden" id="productCount"/> *@
                <div class="purchaseBtn w-full flex justify-center items-center">
                    <button id="addToCard-button-@Model.Id" class="h-[43px] addToCard-button-category action-btn-category"
                            data-productid="@Model.Id"
                            id="add-to-cart-button-@Model.Id"
                            onclick=@("CartManager" + Model.Id + ".productAddToCartAsync('" + addtocartlink + "'," + Model.Id + ")")>
                        @* @addToCartText *@
                            
                        <svg stroke="currentColor" fill="currentColor" stroke-width="0" t="1551322312294" viewBox="0 0 1024 1024" version="1.1" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg">
                            <defs></defs><path d="M474 152m8 0l60 0q8 0 8 8l0 704q0 8-8 8l-60 0q-8 0-8-8l0-704q0-8 8-8Z"></path><path d="M168 474m8 0l672 0q8 0 8 8l0 60q0 8-8 8l-672 0q-8 0-8-8l0-60q0-8 8-8Z"></path>
                        </svg>
                       @* <img  src="~/Themes/Emporium/Content/icons/plus.svg" class="w-[20px] text-red-custRed"/> *@

                    </button>
                    <div id="addToCard-category-@Model.Id" class="addToCard-category inVisibleElement action-btn">
                        <button id="addToCard-plus-@Model.Id" class="addToCard-plus p-2 text-red-custRed" data-productid="@Model.Id" id="add-to-cart-button-@Model.Id"
                                onclick=@("CartManager" + Model.Id + ".productAddToCartAsync('" + addtocartlink + "'," + Model.Id + ")")>
                            <svg stroke="currentColor" fill="currentColor" stroke-width="0" t="1551322312294" viewBox="0 0 1024 1024" version="1.1" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg">
                                <defs></defs><path d="M474 152m8 0l60 0q8 0 8 8l0 704q0 8-8 8l-60 0q-8 0-8-8l0-704q0-8 8-8Z"></path><path d="M168 474m8 0l672 0q8 0 8 8l0 60q0 8-8 8l-672 0q-8 0-8-8l0-60q0-8 8-8Z"></path>
                            </svg>
                            @* <img  src="~/Themes/Emporium/Content/icons/plus.svg" class="w-[18px] text-red-custRed"/> *@
                        </button>


                        <div class="addToCard-counter" id="count-@Model.Id"></div>
                        <button id="AddToCardProduct-status-@Model.Id" class="AddToCardProduct-status p-2 text-red-custRed" data-productid="@Model.Id"
                                onclick=@("CartManager" + Model.Id + ".updateCartItem(" + Model.Id + ")")>
                        </button>
                    </div>
                    <input type="hidden" id="cartId-@Model.Id"/>
                    <input type="hidden" id="productId-@Model.Id"/>
                    <input type="hidden" id="productCount-@Model.Id"/>

                </div>

                if (Model.ProductPrice.IsRental)
                {
                    addToCartText = T("ShoppingCart.Rent").Text;
                }
                if (Model.ProductPrice.AvailableForPreOrder)
                {
                    addToCartText = T("ShoppingCart.PreOrder").Text;
                }
                @* <button type="button" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;">@(addToCartText)</button> *@
                    @* <button class="button-2 add-to-cart-button" data-productid="@Model.Id" id="add-to-cart-button-@Model.Id" *@
                    @*         onclick="AjaxCart.addproducttocart_details('@addtocartlink', null, true,@JObject.Parse(data));return false;"> *@
                    @*     $1$ @addToCartText #1# *@
                    @*     <div class="product-add-to-cart"> *@
                    @*         <span class="addToCard-plus-category" style="border-radius: 15px;text-align: center;padding: 2px;"> *@
                    @*             <svg width="20px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"> *@
                    @*                 <g> *@
                    @*                     <line stroke-width="3px" x1="16" x2="16" y1="7" y2="25"/> *@
                    @*                     <line stroke-width="3px" x1="7" x2="25" y1="16" y2="16"/> *@
                    @*                 </g> *@
                    @*             </svg> *@
                    @*         </span> *@
                    @*     </div> *@
                    @* </button> *@

                ///////////////////////////////////////// Simple AddToCard           

                @* <div  class="product-add-to-cart" data-productid="@Model.Id" id="add-to-cart-button-@Model.Id" *@
                @*      onclick="AjaxCart.addproducttocart_details('@addtocartlink', null, true,@JObject.Parse(data));return false;"> *@
                @*     $1$ @addToCartText #1# *@
                @*     $1$ <div class="product-add-to-cart"> #1# *@
                @*     <span  class="addToCard-plus-category" style="border-radius: 15px;text-align: center;padding: 2px;"> *@
                @*         <svg width="20px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"> *@
                @*             <g> *@
                @*                 <line stroke-width="3px" x1="16" x2="16" y1="7" y2="25"/> *@
                @*                 <line stroke-width="3px" x1="7" x2="25" y1="16" y2="16"/> *@
                @*             </g> *@
                @*         </svg> *@
                @*     </span> *@
                @*     $1$ </div> #1# *@
                @* </div> *@
            }
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
    </div>
</div>
</div>
@if (!Model.ProductPrice.DisableBuyButton)
{
    <script asp-location="Footer">
     class  @("Util" + Model.Id) {
       static getIdValue(id) {
           if (document.getElementById(id).value){      
                     return parseInt(document.getElementById(id).value)
           }
       }
     
       static checkSubProductFlag() {
         return !!document.getElementById("product_attribute_3")?.value
       }
     }
     
     class @("DOMManager" + Model.Id) {
       static getElementById(id) {
         return document.getElementById(id);
       }
     
       static getElementsBySelector(selector) {
         return document.querySelectorAll(selector);
       }
     
       static addClass(element, className) {
         element.classList.add(className);
       }
     
       static removeClass(element, className) {
         element.classList.remove(className);
       }
     
       static setElementPadding(element, padding) {
         element.style.padding = padding;
       }
     
       static setElementInnerText(element, text) {
         element.innerText = text;
       }
     
       static setElementInnerHTML(element, html) {
         element.innerHTML = html;
       }
     }
  /////////////////////////////////////////// Store 
  store.subscribe(() => {
      @("CartManager" + Model.Id).getShoppingCartData()
  })
  ///////////////////////////////////////////

   class @("CartManager" + Model.Id) {
    static productAddToCartAsync = async (url,productId) => {
        ///////////////////////////////////////////////////////////////////////////////  Loading addToCart
          let AddtoCartBtnBox = document.getElementById("addToCard-category-@Model.Id")
          let addToCardPlusDisable = document.querySelector("#addToCard-plus-@Model.Id svg")
          let AddToCardMinusDisable = document.querySelector("#AddToCardProduct-status-@Model.Id svg")
          let AddToCardTrashDisable = document.querySelector("#AddToCardProduct-status-@Model.Id span")
          let AddtoCartBtn = document.getElementById("addToCard-button-@Model.Id")
        
                  if (addToCardPlusDisable !== null){
                          addToCardPlusDisable.classList.add('disableSvgCartBtn')
                 }
                   if (AddToCardTrashDisable !== null){
                      AddToCardTrashDisable.classList.add('disableTrashIcon') 
                   }  
  
                 if (AddToCardMinusDisable !== null){
                        AddToCardMinusDisable.classList.add('disableSvgCartBtn')
                    }
  
         document.querySelector("button.addToCard-plus").disabled = true;
         document.querySelector("button.AddToCardProduct-status").disabled = true;
       
         AddtoCartBtnBox.classList.add('loading')
         AddtoCartBtn.classList.add('loading')
        ///////////////////////////////////////////////////////////////////////////////  
            let productData = ''
            let attributeIdInt = 0   
            let attrValueInt = null
            
             if (attributeIdInt === 0 && attrValueInt === null){
                 productData = {
                       ProductId: productId,
                       ...PRODUCT_ATTRIBUTES,
                       }                     
              }
       
       addAntiForgeryToken(productData)
       // await $.ajax({
       //                url: url,
       //                type: "POST",
       //                data: productData
       //            });
        // let response =  await RequestHandler.requestContentFrom(url, HTTP_METHODS.POST, productData)
        
        let response =  await $.ajax({url: url, type: "POST",data: productData });
             
         ///////////////////////////////////////////// show Error when Product have attribute    
          if (!response.success){
           const errorNotify = document.querySelector('#notification .notification-info p')
                              errorNotify.innerHTML = response.message
                              document.getElementById('notification').classList.add('received')
                         }
           let notificationExist = document.getElementById('notification').classList.contains('received')
                                      let hideNotify = document.getElementById('notification')
                                      if(notificationExist) {
                                          setTimeout(function () {
                                                   hideNotify.classList.remove('received')
                         }, 5000)
            }     
            //////////////////////////////////////////////////                              
       
       CartManagerRedux.getShoppingCartData() 
       
       // AddtoCartBtn.classList.remove('loading')
       
    }
  
    static updateCartItem = async (productId) => {
         let AddtoCartBtnBox = document.getElementById("addToCard-category-@Model.Id")
         let addToCardPlusDisable = document.querySelector("#addToCard-plus-@Model.Id svg")
         let AddToCardMinusDisable = document.querySelector("#AddToCardProduct-status-@Model.Id svg")
         let AddToCardTrashDisable = document.querySelector("#AddToCardProduct-status-@Model.Id span") 
          
          if (addToCardPlusDisable !== null){
                      addToCardPlusDisable.classList.add('disableSvgCartBtn')
             }
               if (AddToCardTrashDisable !== null){
                  AddToCardTrashDisable.classList.add('disableTrashIcon') 
               }  
                   
             if (AddToCardMinusDisable !== null){
                                    AddToCardMinusDisable.classList.add('disableSvgCartBtn')
                }
                 
                document.getElementById(`addToCard-plus-@Model.Id`).disabled = false;
                document.getElementById(`AddToCardProduct-status-@Model.Id`).disabled = false;
                AddtoCartBtnBox.classList.add('loading')
                AddtoCartBtnBox.disabled = true
    /////////////////////////////////////////////////////////////////////////
      const counts = parseInt(document.getElementById(`productCount-@Model.Id`).value)
      const idCart =parseInt(document.getElementById(`cartId-@Model.Id`).value)
      
      let attrValue = document.getElementById("attrValueId")
      let attributeId = document.getElementById("attributeId")
      let cartContents = ''
      let attributeIdInt = 0    
      let attrValueInt = 0
      
      
      if (attributeId !== null && attrValue !== null){
         attrValueInt =  parseInt(attrValue.value)
         attributeIdInt = parseInt(attributeId.value)
      }
      
      
      if (counts > 1){
          if (attributeIdInt === 0 && attrValueInt === 0){
              cartContents =  [
                              {key:`addtocart_${productId}.EnteredQuantity`, value:counts -1},
                              {key:`itemquantity${idCart}`, value:counts -1},
                              {key:`addtocart_${productId}.UpdatedShoppingCartItemId`, value:idCart}
                            ]
          }
          else{
              cartContents =  [
                  {key:`product_attribute_${productId}_3_${attributeId}`, value:attributeId},
                  {key:`itemquantity${idCart}`, value:counts -1},
                  {key:`addtocart_${productId}.EnteredQuantity`, value:counts},
                  {key:`addtocart_${productId}.UpdatedShoppingCartItemId`, value:idCart}
                ]
            }
      }
      else {
          cartContents =  [
              { value: 0, key: "itemquantity1" },
              { value: `${idCart}`, key: "removefromcart" }
            ]
             document.getElementById(`productCount-@Model.Id`).value= 0; 
      }
      
      await this.updateCartItems('/api/ShoppingCart/UpdateCart', cartContents);
      
      CartManagerRedux.getShoppingCartData()
       await @("ButtonsManager" + Model.Id).UpdateCard()
      }
    
    static getShoppingCartData = async () => {
    /////////////////////////////////////////////////////////////  Loading addToCart Attribute
       let addToCardPlusDisable = document.querySelector("#addToCard-plus-@Model.Id svg")
       let AddToCardMinusDisable = document.querySelector("#AddToCardProduct-status-@Model.Id svg")
       let AddToCardTrashDisable = document.querySelector("#AddToCardProduct-status-@Model.Id span")
      
      
      if (addToCardPlusDisable !== null){
          addToCardPlusDisable.classList.add('disableSvgCartBtn')
      }
      if (AddToCardTrashDisable !== null){
        AddToCardTrashDisable.classList.add('disableTrashIcon')
      }
  
      if (AddToCardMinusDisable !== null){
        AddToCardMinusDisable.classList.add('disableSvgCartBtn')
      }
  
      document.getElementById(`addToCard-plus-@Model.Id`).disabled = false;    
      document.getElementById(`AddToCardProduct-status-@Model.Id`).disabled = false;
      
      
      ///////////////////////////////////////////////////////////////////////////////       
      let addtoCartCounter = document.getElementById(`productCount-@Model.Id`)
      let productMaxQuantity = 0
      let response = []
        let find = false
      ///////////////////////////////////////////  Declare Store
      store.getState(
      response = store.getState()
      )
      ///////////////////////////////////////////  
      let cartItems = response.Items
      if (cartItems.length !== 0){
        cartItems.map((childs) => {
         if (childs.ProductId === @Model.Id) {
         //////////////////////////////////////////////           
        productMaxQuantity = childs.AllowedQuantities.length
     
        document.getElementById(`cartId-@Model.Id`).value = childs.Id
        document.getElementById(`productId-@Model.Id`).value= @Model.Id;
        document.getElementById(`productCount-@Model.Id`).value= childs.Quantity;
        document.getElementById(`count-@Model.Id`).innerHTML= childs.Quantity;        
            find = true
             } 
           }) 
        
             if (!find){
               document.getElementById("productCount-@Model.Id").value = 0;
               document.getElementById("count-@Model.Id").innerHTML= 0;     
               }
     
      }
      
      @("ButtonsManager" + Model.Id).productAddToCartStyle();
      //////////////////////////////////////////////// Disable AddToACartPlusBtn / Over MaxQuantity 
      
      if (productMaxQuantity === parseInt(addtoCartCounter.value)){
        document.getElementById(`addToCard-plus-@Model.Id`).disabled = true;
         if (addToCardPlusDisable !== null){
                        addToCardPlusDisable.classList.add('disableSvgCartBtn')
                    }
                  }else if (productMaxQuantity !== parseInt(addtoCartCounter.value)){
        document.getElementById(`addToCard-plus-@Model.Id`).disabled = false;
              if (addToCardPlusDisable !== null){
                             addToCardPlusDisable.classList.remove('disableSvgCartBtn')
                         }
         }
     
            // if (addToCardPlusDisable !== null){
            //     addToCardPlusDisable.classList.remove('disableSvgCartBtn')
            // }
            if (AddToCardTrashDisable !== null){
              AddToCardTrashDisable.classList.remove('disableTrashIcon')
            }
            if (AddToCardMinusDisable !== null){
              AddToCardMinusDisable.classList.remove('disableSvgCartBtn')
            }
      
      
    }
  
    static updateCartItems = async (url, cartContents) => {
      return await RequestHandler.requestContentFrom(url, HTTP_METHODS.POST, cartContents)
    }
  }
  
  
   class @("ButtonsManager" + Model.Id) {
      static productAddToCartStyle = function () {
       ////////////////////////////////////////////////////  Loading Attribute 
      let AddtoCartBtn =  document.getElementById(`addToCard-button-@Model.Id`)
      let AddtoCartBtnBox = document.getElementById(`addToCard-category-@Model.Id`)
      let counterBox = document.getElementById(`count-@Model.Id`);
        
        
      let addToCardPlusDisable = document.querySelector(`#addToCard-plus-@Model.Id svg`)
      let AddToCardMinusDisable = document.querySelector(`#AddToCardProduct-status-@Model.Id svg`)
      let AddToCardTrashDisable = document.querySelector(`#AddToCardProduct-status-@Model.Id span`)
  
      ////////////////////////////////////////////////////   
      let productCount = 0
      if (@("Util" + Model.Id).getIdValue(`productCount-@Model.Id`) === null ||  @("Util" + Model.Id).getIdValue(`productCount-@Model.Id`) === undefined ){
        productCount = 0
      } else {
            productCount = @("Util" + Model.Id).getIdValue(`productCount-@Model.Id`)
      }
      
      if (productCount < 1) {
      AddtoCartBtn.classList.remove('inVisibleElement')
      AddtoCartBtnBox.classList.add('inVisibleElement')
      @("DOMManager" + Model.Id).setElementInnerText(counterBox,productCount ? productCount : 0)
      
      
      AddtoCartBtn.disabled = false
      if (addToCardPlusDisable !== null){
          addToCardPlusDisable.classList.remove('disableSvgCartBtn')
      }
      if (AddToCardTrashDisable !== null){
        AddToCardTrashDisable.classList.remove('disableTrashIcon')
      }
      if (AddToCardMinusDisable !== null){
        AddToCardMinusDisable.classList.remove('disableSvgCartBtn')
      }
      
      document.getElementById(`addToCard-plus-@Model.Id`).disabled = false;    
      document.getElementById(`AddToCardProduct-status-@Model.Id`).disabled = false;
      
       ////////////////////////////////////////////////////////////////////////////
      } else if (productCount >= 1) {
        AddtoCartBtn.classList.add('inVisibleElement')
                  
       AddtoCartBtnBox.classList.remove('inVisibleElement')
       
       @("ButtonsManager" + Model.Id).addToCardPlus()
      }
      AddtoCartBtn.classList.remove('loading')
      
    }
  
      static UpdateCard = function () {
       let counterBox = document.getElementById(`count-@Model.Id`);
       let productCount
      
      productCount =  @("Util" + Model.Id).getIdValue(`productCount-@Model.Id`)
    
      counterBox.innerHTML = productCount
      let counterBox_value = productCount;
      if (counterBox_value < 1) {
        document.getElementById("addToCard-button-@Model.Id").classList.remove('inVisibleElement');
     
        document.getElementById("addToCard-category-@Model.Id").classList.add('inVisibleElement');
              
      counterBox_value = 0;
      counterBox.innerText = counterBox_value;
       document.getElementById("AddToCardProduct-status-@Model.Id").innerHTML = '';
      } else if (counterBox_value === 1) {
          // <span class="trash-icon"></span>
        document.getElementById("AddToCardProduct-status-@Model.Id").innerHTML = '<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 16 16" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"></path><path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"></path></svg>';
      }
    }
  
      static addToCardPlus = function () {
        let AddtoCartBtn =  document.getElementById(`addToCard-button-@Model.Id`)
        let AddtoCartBtnBox = document.getElementById(`addToCard-category-@Model.Id`)
        let counterBox = document.getElementById(`count-@Model.Id`);
          
        let addToCardPlusDisable = document.querySelector("#addToCard-plus-@Model.Id svg")
        let AddToCardMinusDisable = document.querySelector("#AddToCardProduct-status-@Model.Id svg")
        let AddToCardTrashDisable = document.querySelector("#AddToCardProduct-status-@Model.Id span")
       
      let counterBox_value 
     
       counterBox_value = parseInt(counterBox.innerText);
  
      if (counterBox_value === 1) {
          // <span class="trash-icon"></span>
        document.getElementById("AddToCardProduct-status-@Model.Id").innerHTML = '<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 16 16" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"></path><path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"></path></svg>';
      } else if (counterBox_value > 1) {
        document.getElementById("AddToCardProduct-status-@Model.Id").innerHTML = '<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 1024 1024" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M872 474H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z"></path></svg>'
      }
      //////////////////////////////////////////////////////////////////////////  Loading Attribute
      AddtoCartBtnBox.classList.remove('loading')
      AddtoCartBtnBox.disabled = false
      if (addToCardPlusDisable !== null){
          addToCardPlusDisable.classList.remove('disableAddToCartPlus')
      }
      if (AddToCardTrashDisable !== null){
          
        AddToCardTrashDisable.classList.remove('disableTrashIcon')
      }
      if (AddToCardMinusDisable !== null){
        AddToCardMinusDisable.classList.remove('disableSvgCartBtn')
      }
       document.getElementById(`addToCard-plus-@Model.Id`).disabled = false;
      document.getElementById(`AddToCardProduct-status-@Model.Id`).disabled = false;
    }
  }
</script>
}