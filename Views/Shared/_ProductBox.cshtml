@model ProductOverviewModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration
@using LinqToDB.Common
@using Newtonsoft.Json.Linq;

@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject ISettingService settingService
@inject CatalogSettings catalogSettings
@inject IViewComponentSelector viewComponentSelector

@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    addtocartlink = @Url.RouteUrl("AddProductToCart-Details", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart });

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;
    var picture = Model.PictureModels.FirstOrDefault();

    // addtocartlink = "https://localhost:5001/addproducttocart/details/82634/1";
}

<div class="product-item" data-productid="@Model.Id">
    <div class="picture">
        <a href="@(Url.RouteUrl<Product>(new { SeName = Model.SeName }))" title="@picture.Title">
            @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
            {
                @await Component.InvokeAsync("LazyLoadImage", new (string Key, string Value)[]
                       {
                           ("src", picture.ImageUrl),
                           ("alt", picture.AlternateText),
                           ("title", picture.Title),
                           ("class", "picture-img")
                       })
            }
            else
            {
                <img class="picture-img" src="@picture.ImageUrl"
                     alt="@picture.AlternateText" title="@picture.Title"/>
            }
        </a>
        <div class="btn-wrapper">
            @if (!Model.ProductPrice.DisableAddToCompareListButton)
            {
                <button type="button" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">@T("ShoppingCart.AddToCompareList")</button>
            }
            @if (!Model.ProductPrice.DisableWishlistButton)
            {
                <button type="button" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">@T("ShoppingCart.AddToWishlist")</button>
            }
        </div>
    </div>
<div class="details">
    <h2 class="product-title">
        <a href="@(Url.RouteUrl<Product>(new { SeName = Model.SeName }))">@Model.Name</a>
    </h2>
    @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
    {
        <div class="sku">
            @Model.Sku
        </div>
    }
    @* @if (Model.ReviewOverviewModel.AllowCustomerReviews) *@
    @* { *@
    @*     var ratingPercent = 0; *@
    @*     if (Model.ReviewOverviewModel.TotalReviews != 0) *@
    @*     { *@
    @*         ratingPercent = ((Model.ReviewOverviewModel.RatingSum*100)/Model.ReviewOverviewModel.TotalReviews)/5; *@
    @*     } *@
    @*     <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)"> *@
    @*         <div class="rating"> *@
    @*             <div style="width: @(ratingPercent)%"> *@
    @*             </div> *@
    @*         </div> *@
    @*     </div> *@
    @* } *@
    <div class="description">
        @Html.Raw(Model.ShortDescription)
    </div>
    <div class="add-info">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
        <div class="prices">
            @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
            {
                <span class="price old-price">@Model.ProductPrice.OldPrice</span>
            }
            <span class="price actual-price">@Model.ProductPrice.Price</span>
            @if (Model.ProductPrice.DisplayTaxShippingInfo)
            {
                var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <span class="tax-shipping-info">
                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))
                </span>
            }
            @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <div class="base-price-pangv">
                    @Model.ProductPrice.BasePricePAngV
                </div>
            }
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
        <div class="buttons">
            <nop-antiforgery-token />
            @*<button type="button" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')">@T("Products.Details")</button>*@
            @if (!Model.ProductPrice.DisableBuyButton)
            {
                var addToCartText = T("ShoppingCart.AddToCart").Text;
                var data = "{\"addtocart_" + Model.Id + ".EnteredQuantity\": 1,\"AddProductReview.Title\": \"\",\"AddProductReview.ReviewText\":\"\",\"AddProductReview.Rating\": 5,\"FullName\": \"\",\"Email\": \"\",\"Email\": \"\",\"Enquiry\":\"\" }";

                if (Model.ProductPrice.IsRental)
                {
                    addToCartText = T("ShoppingCart.Rent").Text;
                }
                if (Model.ProductPrice.AvailableForPreOrder)
                {
                    addToCartText = T("ShoppingCart.PreOrder").Text;
                }
                @* <button type="button" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;">@(addToCartText)</button> *@
                <button class="button-2 add-to-cart-button" data-productid="@Model.Id" id="add-to-cart-button-@Model.Id"
                        onclick="AjaxCart.addproducttocart_details('@addtocartlink', null, true,@JObject.Parse(data));return false;">
                    @addToCartText
                </button>
            }
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
    </div>
</div>
</div>
