@using Newtonsoft.Json
@using Nop.Core.Domain.Messages
@using Nop.Services.Messages
@inject MessagesSettings messagesSettings
@{
    var successMessages = new List<string>();
    var errorMessages = new List<string>();
    var warningMessages = new List<string>();

    //Get messages from TempData
    var notes = TempData.ContainsKey(NopMessageDefaults.NotificationListKey)
        ? JsonConvert.DeserializeObject<IList<NotifyData>>(TempData[NopMessageDefaults.NotificationListKey].ToString())
        : null;

    if (notes != null)
    {
        foreach (var note in notes)
        {
            switch (note.Type)
            {
                case NotifyType.Success:
                    successMessages.Add(note.Message);
                    break;
                case NotifyType.Error:
                    errorMessages.Add(note.Message);
                    break;
                case NotifyType.Warning:
                    warningMessages.Add(note.Message);
                    break;

            }
        }
    }
}
@if (successMessages.Any() || warningMessages.Any() || errorMessages.Any())
{
    if (messagesSettings.UsePopupNotifications)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                var notes = {
                    'success': [
                        @Html.Raw(string.Join(", ", successMessages.Select(x => $" '{JavaScriptEncoder.Default.Encode(x)}' ")))],
                    'warning': [
                        @Html.Raw(string.Join(", ", warningMessages.Select(x => $" '{JavaScriptEncoder.Default.Encode(x)}' ")))],
                    'error': [
                        @Html.Raw(string.Join(", ", errorMessages.Select(x => $" '{JavaScriptEncoder.Default.Encode(x)}' ")))]
                };

                displayJoinedPopupNotifications(notes);
            });
        </script>
    }
    else
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                var successMsg = [ @Html.Raw(string.Join(", ", successMessages.Select(x => $" '{JavaScriptEncoder.Default.Encode(x)}' "))) ];
                displayBarNotification(successMsg, 'success', false);

                var errorMsg = [ @Html.Raw(string.Join(", ", errorMessages.Select(x => $" '{JavaScriptEncoder.Default.Encode(x)}' "))) ];
                displayBarNotification(errorMsg, 'error', false);

                var warningMsg = [ @Html.Raw(string.Join(", ", warningMessages.Select(x => $" '{JavaScriptEncoder.Default.Encode(x)}' "))) ];
                displayBarNotification(warningMsg, 'warning', false);
            });
        </script>
    }
}

<div class="ajax-loading-block-window" style="display: none">
</div>
<div id="dialog-notifications-success" title="@T("Common.Notification")" style="display:none;">
    
</div>
<div id="dialog-notifications-error" title="@T("Common.Error")" style="display:none;">
</div>
<div id="dialog-notifications-warning" title="@T("Common.Warning")" style="display:none;">
</div>
<div id="bar-notification" class="bar-notification-container" data-close="@T("Common.Close")">
</div>
   @* /////////////////////////////////////////////////////////////////// Notification        *@
                 <div id="notification">
                     <div class="notification-message">
                         <div class="notification-info">
                             <div>
                             <h2>توجه</h2>
                             <div id="button-dismiss" class="flex justify-center items-center w-[35px] h-[35px]">
                                 @* <button aria-labelledby="button-dismiss" onclick="hiddenNotification()"> *@
                                 @*     <svg class="fill-iconLightColor stroke-iconLightColor stroke-2" height="15" width="15" *@
                                 @*          id="Layer_1" style="enable-background:new 0 0 512 512;" version="1.1" viewBox="0 0 512 512" *@
                                 @*          xml:space="preserve" xmlns="http://www.w3.org/2000/svg" *@
                                 @*          xmlns:xlink="http://www.w3.org/1999/xlink"> *@
                                 @*         <path *@
                                 @*             d="M437.5,386.6L306.9,256l130.6-130.6c14.1-14.1,14.1-36.8,0-50.9c-14.1-14.1-36.8-14.1-50.9,0L256,205.1L125.4,74.5  c-14.1-14.1-36.8-14.1-50.9,0c-14.1,14.1-14.1,36.8,0,50.9L205.1,256L74.5,386.6c-14.1,14.1-14.1,36.8,0,50.9  c14.1,14.1,36.8,14.1,50.9,0L256,306.9l130.6,130.6c14.1,14.1,36.8,14.1,50.9,0C451.5,423.4,451.5,400.6,437.5,386.6z"/> *@
                                 @*     </svg> *@
                                 @* </button> *@
                             </div>
                             </div>
                             <div class="notification-error-content flex justify-start items-center gap-2">
                                 <p></p>
                             </div>

                         </div>
                     </div>
                 </div>
                 
                 @* /////////////////////////////////////////////////////////////////////// *@
@* @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.Notifications }) *@
