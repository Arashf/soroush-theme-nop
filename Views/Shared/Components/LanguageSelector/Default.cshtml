@model LanguageSelectorModel

@inject Nop.Core.IWebHelper webHelper

@if (Model.AvailableLanguages.Count > 1)
{
    <div class="language-selector desktop">
        @{
            var returnUrl = webHelper.GetRawUrl(Context.Request);

            if (Model.UseImages)
            {
                <ul class="language-list">
                    @foreach (var lang in Model.AvailableLanguages)
                    {
                        <li>
                        	<a href="@Url.RouteUrl("ChangeLanguage", new { langid = lang.Id, returnUrl }, webHelper.GetCurrentRequestProtocol())" title="@lang.Name">
                                <img title='@lang.Name' alt='@lang.Name' @(lang.Id == Model.CurrentLanguageId ? " class=selected" : null)
                                     src="@Url.Content("~/images/flags/" + @lang.FlagImageFileName) " />
                            </a>
                        </li>
                    }
                </ul>
            }
            else
            {
                var languages = await Model.AvailableLanguages.SelectAwait(async lang => new SelectListItem
                {
                    Text = lang.Name,
                    Value = Url.RouteUrl("ChangeLanguage", new { langid = lang.Id, returnUrl }, webHelper.GetCurrentRequestProtocol()),
                    Selected = lang.Id.Equals(Model.CurrentLanguageId)
                }).ToListAsync();

                <div class="select-wrap">
                    <select id="customerlanguage" name="customerlanguage" asp-items="@languages" onchange="setLocation(this.value);" aria-label="@T("Languages.Selector.Label")"></select>
                </div>
            }
        }
    </div>

    <div class="language-selector mobile mobile-selector">
        @{
            var currentLanguage = Model.AvailableLanguages.FirstOrDefault(x => x.Id.Equals(Model.CurrentLanguageId));

            <div class="current-language-selector selector-title">@currentLanguage.Name</div>

            <div class="language-selector-options mobile-collapse">

                @for (int i = 0; i < Model.AvailableLanguages.Count; i++)
                {
                    var currentLanguageIterator = Model.AvailableLanguages[i];

                    string selected = string.Empty;

                    if (currentLanguageIterator.Id == currentLanguage.Id)
                    {
                        selected = " checked=\"checked\"";
                    }

                    <div class="selector-options-item">
                        <input type="radio" name="language-selector" id="language-@i" value="@Url.RouteUrl("ChangeLanguage", new { langid = currentLanguageIterator.Id, returnUrl }, webHelper.GetCurrentRequestProtocol())" onclick="setLocation(this.value);" @Html.Raw(selected) />
                        <label for="language-@i">@currentLanguageIterator.Name</label>
                    </div>
                }
            </div>
        }
    </div>
}