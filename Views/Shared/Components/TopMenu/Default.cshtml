@model TopMenuModel
@using Nop.Core.Domain.Topics
@using Category = Nop.Core.Domain.Catalog.Category
@using DocumentFormat.OpenXml.Wordprocessing

@functions {

    async Task CategoryLine(TopMenuModel.CategoryLineModel lineModel)
    {
        <li class="subMenu">
            <div class="flex items-center gap-1">
                @* <FiShoppingBag size={17} class="text-textSecondary font-semibold"/> *@
                <a href="@(Url.RouteUrl<Category>(new { SeName = lineModel.Category.SeName }))">
                    @lineModel.Category.Name

                    @if (lineModel.Category.NumberOfProducts.HasValue)
                    {
                        <text> </text>@T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                    }
                </a>
            </div>

            @{
                //subcategories
                var subCategories = lineModel.ResponsiveMobileMenu ?
                    //responsive (all categories)
                                        
                    lineModel.Category.SubCategories :

                    //standard design (only categories with "IncludeInTopMenu")
                                    
                    lineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();

                var levelClass = "";
                if (lineModel.Level == 0)
                {
                    levelClass = "first-level";
                }
                if (subCategories.Count > 0)
                {
                    <div class="subMenuBox">
                        <div class="flex flex-wrap relative">
                            <ul class="h-[370px] flex flex-wrap flex-col gap-x-10">
                                @foreach (var subCategory in subCategories)
                                {
                                    var categoryLineModel = new TopMenuModel.CategoryLineModel
                                    {
                                        Category = subCategory,
                                        Level = lineModel.Level + 1,
                                        ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                                    };
                                    <li>
                                        <a href="@(Url.RouteUrl<Category>(new { SeName = categoryLineModel.Category.SeName }))" class="@(categoryLineModel.Category.HaveSubCategories ? "subMenuTitle" : "")">
                                            @categoryLineModel.Category.Name

                                            @if (categoryLineModel.Category.NumberOfProducts.HasValue)
                                            {
                                                <text> </text>@T("Categories.TotalProducts", categoryLineModel.Category.NumberOfProducts.Value)
                                            }


                                        </a>
                                    </li>
                                    @foreach (var lvlsubcat in subCategory.SubCategories)
                                    {
                                        var subcategoryLineModel = new TopMenuModel.CategoryLineModel
                                        {
                                            Category = lvlsubcat,
                                            Level = lineModel.Level + 1,
                                            ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                                        };
                                        @if (subcategoryLineModel.Category.IncludeInTopMenu)
                                        {
                                            <li>
                                                <a href="@(Url.RouteUrl<Category>(new { SeName = subcategoryLineModel.Category.SeName }))">
                                                    @subcategoryLineModel.Category.Name

                                                    @if (subcategoryLineModel.Category.NumberOfProducts.HasValue)
                                                    {
                                                        <text> </text>@T("Categories.TotalProducts", subcategoryLineModel.Category.NumberOfProducts.Value)
                                                    }


                                                </a>
                                            </li>
                                        }
                                    }
                                    // await CategoryLine(categoryLineModel);
                                }
                            </ul>
                        </div>
                    </div>
                }
            }
        </li>
    }

}

@* /////////////////////////////////////////////// CategoryLineModel Mobile *@
@functions {

    async Task CategoryLineMobile(TopMenuModel.CategoryLineModel lineModel)
    {
        <div
            class="optionContainer-sideNav m-auto last:border-none border-b-[1px] border-solid border-borderPrimary">
            <div class="optionHead-sideNav w-full flex items-center">
                <div class="mainOptionHead flex items-center gap-[2px]">
                    @* <svg class="fill-iconSecondary stroke-iconSecondary" width="18px" height="18px" *@
                    @*      style="enable-background:new 0 0 100 100;" version="1.1" *@
                    @*      viewBox="0 0 100 100" xml:space="preserve" *@
                    @*      xmlns="http://www.w3.org/2000/svg" *@
                    @*      xmlns:xlink="http://www.w3.org/1999/xlink"> *@
                    @*     <g id="bakery"> *@
                    @*         <g> *@
                    @*             <path *@
                    @*                 d="M95,50h-4.9C92,46.3,93,42.2,93,38c0-14.3-11.6-26-25.9-26c-6,0-11.9,2.1-16.5,6H31v-2c0-6.6-5.4-12-12-12S7,9.4,7,16v34    H5c-0.6,0-1,0.4-1,1v6c0,0.6,0.4,1,1,1h1.1L11,95.1c0.1,0.5,0.5,0.9,1,0.9h76c0.5,0,0.9-0.4,1-0.9L93.9,58H95c0.6,0,1-0.4,1-1v-6    C96,50.4,95.6,50,95,50z M67.1,14C80.3,14,91,24.8,91,38c0,4.2-1.1,8.4-3.2,12H59v-7.9c1.5,2.9,4.5,4.9,8,4.9c5,0,9-4,9-9    s-4-9-9-9c-3.5,0-6.5,2-8,4.9v-2.1c0-0.9,0.3-1.7,0.9-2.3l2.5-2.5c1-1,1.5-2.3,1.5-3.7c0-2.9-2.4-5.2-5.2-5.2H54    C57.9,15.4,62.4,14,67.1,14z M60,38c0-3.9,3.1-7,7-7s7,3.1,7,7s-3.1,7-7,7S60,41.9,60,38z M58.8,20c1.8,0,3.2,1.5,3.2,3.2    c0,0.9-0.3,1.7-0.9,2.3l-2.5,2.5c-1,1-1.5,2.3-1.5,3.7V50H31V20H58.8z M9,16c0-5.5,4.5-10,10-10s10,4.5,10,10v34H9V16z M82.1,58    l1.1,7h-9l-1.1-7H82.1z M89.6,75h-2.8l-1.3-8h5.1L89.6,75z M62.8,75h-9l-1.3-8h9L62.8,75z M63.6,67h9l1.3,8h-9L63.6,67z M43.2,77    h9l1.3,8h-9L43.2,77z M42.4,85h-9l-1.3-8h9L42.4,85z M54.2,77h9l1.3,8h-9L54.2,77z M51.8,75h-9l-1.3-8h9L51.8,75z M40.8,75h-9    l-1.3-8h9L40.8,75z M29.8,75h-9l-1.3-8h9L29.8,75z M18.8,75h-8.5l-1.1-8h8.2L18.8,75z M10.6,77h8.5l1.3,8h-8.7L10.6,77z M21.2,77    h9l1.3,8h-9L21.2,77z M31.7,87l1.1,7h-9l-1.1-7H31.7z M33.7,87h9l1.1,7h-9L33.7,87z M44.7,87h9l1.1,7h-9L44.7,87z M55.7,87h9    l1.1,7h-9L55.7,87z M66.7,87h9l1.1,7h-9L66.7,87z M66.4,85l-1.3-8h9l1.3,8H66.4z M76.2,77h9l1.3,8h-9L76.2,77z M88.4,84.6L87.2,77    h2.2L88.4,84.6z M84.8,75h-9l-1.3-8h9L84.8,75z M71.1,58l1.1,7h-9l-1.1-7H71.1z M60.1,58l1.1,7h-9l-1.1-7H60.1z M49.1,58l1.1,7h-9    l-1.1-7H49.1z M38.1,58l1.1,7h-9l-1.1-7H38.1z M27.1,58l1.1,7h-9l-1.1-7H27.1z M16.1,58l1.1,7H9.1l-0.9-7H16.1z M12,87h8.8l1.1,7    h-9L12,87z M78.9,94l-1.1-7h9l0.7,4.6L87.1,94H78.9z M90.9,65h-5.7l-1.1-7h7.7L90.9,65z M94,56h-1H7H6v-4h2h22h64V56z"/> *@
                    @*             <path *@
                    @*                 d="M19,14c-1.5,0-9,0.1-9,3s7.5,3,9,3s9-0.1,9-3S20.5,14,19,14z M19,18c-3.5,0-5.9-0.6-6.7-1c0.9-0.4,3.2-1,6.7-1    s5.9,0.6,6.7,1C24.9,17.4,22.5,18,19,18z"/> *@
                    @*             <path *@
                    @*                 d="M19,26c-1.5,0-9,0.1-9,3s7.5,3,9,3s9-0.1,9-3S20.5,26,19,26z M19,30c-3.5,0-5.9-0.6-6.7-1c0.9-0.4,3.2-1,6.7-1    s5.9,0.6,6.7,1C24.9,29.4,22.5,30,19,30z"/> *@
                    @*             <path *@
                    @*                 d="M19,38c-1.5,0-9,0.1-9,3s7.5,3,9,3s9-0.1,9-3S20.5,38,19,38z M19,42c-3.5,0-5.9-0.6-6.7-1c0.9-0.4,3.2-1,6.7-1    s5.9,0.6,6.7,1C24.9,41.4,22.5,42,19,42z"/> *@
                    @*         </g> *@
                    @*     </g> *@
                    @* </svg> *@
                    <span class="mainHeadMenu pt-[1px]">
                        <a href="@(Url.RouteUrl<Category>(new { SeName = lineModel.Category.SeName }))">
                            @lineModel.Category.Name

                            @if (lineModel.Category.NumberOfProducts.HasValue)
                            {
                                <text> </text>@T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                            }
                        </a>
                    </span>
                </div>
                <div class="dropDown-icon">
                    <svg class="stroke-iconSecondary feather feather-chevron-down stroke-5"
                         fill="none" height="24" stroke="currentColor" stroke-linecap="round"
                         stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" width="24"
                         xmlns="http://www.w3.org/2000/svg">
                        <polyline points="6 9 12 15 18 9"/>
                    </svg>
                </div>
            </div>
            @{
                //subcategories
                var subCategories = lineModel.ResponsiveMobileMenu ?
                    //responsive (all categories)
                                                    
                    lineModel.Category.SubCategories :

                    //standard design (only categories with "IncludeInTopMenu")
                                                
                    lineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();

                var levelClass = "";
                if (lineModel.Level == 0)
                {
                    levelClass = "first-level";
                }
                if (subCategories.Count > 0)
                {
                    @foreach (var subCategory in subCategories)
                    {
                        var categoryLineModel = new TopMenuModel.CategoryLineModel
                        {
                            Category = subCategory,
                            Level = lineModel.Level + 1,
                            ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                        };
                        <div class="optionBody-sideNav">
                            <div class="optionContainer-sideNav optionContainer-sideNav-child w-full m-auto">
                                <div class="optionHead-sideNav optionHead-sideNav-box">
                                    <div class="mainOptionHead">
                                        <span class="headMenu">
                                            <a href="@(Url.RouteUrl<Category>(new { SeName = categoryLineModel.Category.SeName }))" class="@(categoryLineModel.Category.HaveSubCategories ? "subMenuTitle" : "")">
                                                @categoryLineModel.Category.Name

                                                @if (categoryLineModel.Category.NumberOfProducts.HasValue)
                                                {
                                                    <text> </text>@T("Categories.TotalProducts", categoryLineModel.Category.NumberOfProducts.Value)
                                                }

                                            </a>
                                        </span>
                                    </div>
                                    @if(categoryLineModel.Category.HaveSubCategories){
                                        <div class="dropDown-icon">
                                            <svg class="stroke-iconSecondary feather feather-chevron-down stroke-5"
                                                 fill="none" height="24" stroke="currentColor" stroke-linecap="round"
                                                 stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24"
                                                 width="24" xmlns="http://www.w3.org/2000/svg">
                                                <polyline points="6 9 12 15 18 9"/>
                                            </svg>
                                        </div>
                                    }
                                </div>
                                <div class="optionBody-sideNav">
                                    <div class="optionContainer-sideNav h-auto transition-all duration-300">
                                        @foreach (var lvlsubcat in subCategory.SubCategories)
                                        {
                                            var subcategoryLineModel = new TopMenuModel.CategoryLineModel
                                            {
                                                Category = lvlsubcat,
                                                Level = lineModel.Level + 1,
                                                ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                                            };
                                            @if (subcategoryLineModel.Category.IncludeInTopMenu)
                                            {
                                                <div class="subMenu childrenSubmenu brand-item">
                                                    <span>
                                                        <a href="@(Url.RouteUrl<Category>(new { SeName = subcategoryLineModel.Category.SeName }))">
                                                            @subcategoryLineModel.Category.Name

                                                            @if (subcategoryLineModel.Category.NumberOfProducts.HasValue)
                                                            {
                                                                <text> </text>@T("Categories.TotalProducts", subcategoryLineModel.Category.NumberOfProducts.Value)
                                                            }


                                                        </a>
                                                    </span>
                                                </div>
                                            }
                                        }


                                    </div>

                                </div>
                            </div>
                        </div>
                    }
                }
            }
            @* /////////////////////////////////////////////////////////////// End of Container *@
        </div>
    }

}

@* /////////////////////////////////////////////////////////////////////// end of function *@
<div class="desktopHeaderMenu justify-between flex items-center">
    <div class="flex items-center">
        <div class="desktopMenu">
            <ul id="desktopHeaderMenuSubItem" class="flex justify-between items-center gap-4">
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuBefore, additionalData = Model })
                @if (Model.DisplayHomepageMenuItem)
                {
                    <li>
                        <a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a>
                    </li>
                }
                @if (!Model.UseAjaxMenu)
                {
                    var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
                    @foreach (var category in rootCategories)
                    {
                        var categoryLineModel = new TopMenuModel.CategoryLineModel
                        {
                            Category = category
                        };
                        await CategoryLine(categoryLineModel);
                    }
                }
                @foreach (var topic in Model.Topics)
                {
                    <li>
                        <a href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a>
                    </li>
                }
                @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
                {
                    <li>
                        <a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a>
                    </li>
                }
                @if (Model.DisplayProductSearchMenuItem)
                {
                    <li>
                        <a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a>
                    </li>
                }
                @if (Model.DisplayCustomerInfoMenuItem)
                {
                    <li>
                        <a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a>
                    </li>
                }
                @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
                {
                    <li>
                        <a href="@Url.RouteUrl("Blog")">@T("Blog")</a>
                    </li>
                }
                @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
                {
                    <li>
                        <a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a>
                    </li>
                }
                @* @if (Model.DisplayContactUsMenuItem) *@
                @* { *@
                @*     <li> *@
                @*         <a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a> *@
                @*     </li> *@
                @* } *@
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuAfter, additionalData = Model })
            </ul>
        </div>
    </div>
    <div class="headerCtaMenu flex items-center">
        <ul>
            <li class="flex items-center">
                <svg class="w-[23px] h-[23px] fill-textSecondary" enable-background="new 0 0 48 48"
                     height="48px" version="1.1" viewBox="0 0 48 48" width="48px" xml:space="preserve"
                     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                    <g id="Expanded">
                        <g>
                            <g>
                                <path
                                    d="M35,48H13c-2.757,0-5-2.243-5-5V5c0-2.757,2.243-5,5-5h22c2.757,0,5,2.243,5,5v38C40,45.757,37.757,48,35,48z M13,2     c-1.654,0-3,1.346-3,3v38c0,1.654,1.346,3,3,3h22c1.654,0,3-1.346,3-3V5c0-1.654-1.346-3-3-3H13z"/>
                            </g>
                            <g>
                                <path
                                    d="M39,10H9c-0.553,0-1-0.448-1-1s0.447-1,1-1h30c0.553,0,1,0.448,1,1S39.553,10,39,10z"/>
                            </g>
                            <g>
                                <path
                                    d="M39,40H9c-0.553,0-1-0.448-1-1s0.447-1,1-1h30c0.553,0,1,0.448,1,1S39.553,40,39,40z"/>
                            </g>
                            <g>
                                <path
                                    d="M24,41c-1.104,0-2,0.896-2,2s0.896,2,2,2s2-0.896,2-2S25.104,41,24,41L24,41z"/>
                            </g>
                            <g>
                                <path
                                    d="M29,6H19c-0.553,0-1-0.448-1-1s0.447-1,1-1h10c0.553,0,1,0.448,1,1S29.553,6,29,6z"/>
                            </g>
                        </g>
                    </g>
                </svg>
                <a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a>
            </li>
        </ul>
    </div>
</div>
@{
    var rootCategoriesResponsive = Model.Categories.ToList();
    //name it "Categories" if we have only categories. Otherwise, "Menu"
    var responsiveMenuTitle = Model.HasOnlyCategories ? T("Categories") : T("Menu");
    @* <div class="menu-toggle">@responsiveMenuTitle</div> *@
    <ul class="top-menu mobile">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MobHeaderMenuBefore, additionalData = Model })
        @if (Model.DisplayHomepageMenuItem)
        {
            <li>
                <a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a>
            </li>
        }

        @if (!Model.UseAjaxMenu)
        {
            @foreach (var category in rootCategoriesResponsive)

            {
                var categoryLineModel = new TopMenuModel.CategoryLineModel
                {
                    Category = category,
                    ResponsiveMobileMenu = true
                };
                await CategoryLineMobile(categoryLineModel);
            }
        }


        @foreach (var topic in Model.Topics)
        {
            <li>
                <a href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a>
            </li>
        }
        @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
        {
            <li>
                <a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a>
            </li>
        }
        @if (Model.DisplayProductSearchMenuItem)
        {
            <li>
                <a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a>
            </li>
        }
        @if (Model.DisplayCustomerInfoMenuItem)
        {
            <li>
                <a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a>
            </li>
        }
        @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
        {
            <li>
                <a href="@Url.RouteUrl("Blog")">@T("Blog")</a>
            </li>
        }
        @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
        {
            <li>
                <a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a>
            </li>
        }
        @* @if (Model.DisplayContactUsMenuItem) *@
        @* { *@
        @*     <li> *@
        @*         <a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a> *@
        @*     </li> *@
        @* } *@
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MobHeaderMenuAfter, additionalData = Model })
    </ul>

    @if (Model.UseAjaxMenu)
    {
        <script asp-location="Footer">
        $(document).ready(function () {
            $('.menu-toggle').on('click', function () {
                $(this).siblings('.top-menu.mobile').slideToggle('slow');
            });
            var localized_data = {
                AjaxFailure: "@T("MainMenu.AjaxFailure")"
            };
            mainMenu.init('@Url.RouteUrl("GetCatalogRoot")', '@Url.RouteUrl("GetCatalogSubCategories")', 'ul.top-menu.notmobile', 'ul.top-menu.mobile', localized_data);
        });
        </script>

        <script src="~/js/public.menu.js" asp-location="Footer"></script>
    }
    else
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.menu-toggle').on('click', function () {
                    $(this).siblings('.top-menu.mobile').slideToggle('slow');
                });
                $('.top-menu.mobile .sublist-toggle').on('click', function () {
                    $(this).siblings('.sublist').slideToggle('slow');
                });
            });
        </script>
    }

}