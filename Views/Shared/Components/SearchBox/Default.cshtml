@model SearchBoxModel
<form class="relative" asp-route="ProductSearch" method="get" id="small-search-box-form">
    @if (Model.ShowSearchBox)
    {
        // id="small-searchterms"
        <input id="search" type="text" placeholder="جستجو"  autocomplete="off" name="q"
               placeholder="@T("Search.SearchBox.Tooltip")" aria-label="@T("Search.SearchBox.Text.Label")" 
               />
        @* <input type="text" class="search-box-text" id="small-searchterms" autocomplete="off" name="q"
    placeholder="@T("Search.SearchBox.Tooltip")" aria-label="@T("Search.SearchBox.Text.Label")"/> *@
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new
               {
                   widgetZone =
                       PublicWidgetZones.SearchBoxBeforeSearchButton,
                   additionalData = Model
               })
        @* <button type="submit" class="button-1 search-box-button">@T("Search.Button")</button> *@
        @if (Model.SearchTermMinimumLength > 0)
        {
            <script asp-location="Footer">

            </script>
        }

        @if (Model.AutoCompleteEnabled)
        {
            <script asp-location="Footer">

            </script>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new
               {
                   widgetZone = PublicWidgetZones.SearchBox,
                   additionalData = Model
               })
    }
    <button type="submit">
        <img class="w-[22px]" src="~/Themes/Emporium/Content/icons/search.svg"/>
    </button>
</form>
@* <script> *@
@*       const searchInput = document.getElementById('search') *@
@* *@
@* *@
@*       searchInput.addEventListener('blur', () => { *@
@*         const suggestionList = document.querySelector('.suggestion-list') *@
@*         if (suggestionList) { *@
@*           suggestionList.remove() *@
@*         } *@
@*       })         *@
@*        *@
@*       const processChange = debounce(() => { *@
@*         if (searchInput.value.length < 3) { *@
@*           return *@
@*         } *@
@*         SearchHeader(searchInput) *@
@*       }) *@
@* *@
@*       function debounce(func, timeout = 300) { *@
@*         let timer *@
@*         return (...args) => { *@
@*           clearTimeout(timer) *@
@*           timer = setTimeout(() => { *@
@*             func.apply(this, args) *@
@*           }, timeout) *@
@*         } *@
@*       } *@
@*       function SearchHeader(searchInput) { *@
@*         console.log('SearchHeader') *@
@* *@
@*         var myHeaders = new Headers() *@
@*         myHeaders.append('Content-Type', 'application/json') *@
@*         var raw = JSON.stringify({ *@
@*           q: searchInput, *@
@*         }) *@
@* *@
@*         var requestOptions = { *@
@*           method: 'POST', *@
@*           headers: myHeaders, *@
@*           body: raw, *@
@*         } *@
@* *@
@*         fetch('https://soroush.app/api/catalog/search', requestOptions) *@
@*           .then((response) => response.json()) *@
@*           .then((result) => { *@
@*             console.log(result) *@
@*             displaySuggestions(suggestions.Products) *@
@*           }) *@
@*           .catch((error) => console.log('error', error)) *@
@*       } *@
@*       function displaySuggestions(suggestions) { *@
@*         const suggestionList = document.createElement('ul') *@
@*         suggestionList.classList.add('suggestion-list') *@
@*         suggestions.forEach((suggestion) => { *@
@*           const suggestionItem = document.createElement('li') *@
@*           suggestionItem.textContent = suggestion.Name *@
@*           suggestionList.appendChild(suggestionItem) *@
@*         }) *@
@*         searchInput.parentNode.appendChild(suggestionList) *@
@*       } *@
@*     </script> *@