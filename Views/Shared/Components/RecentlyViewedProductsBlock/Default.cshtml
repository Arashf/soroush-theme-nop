@model IList<ProductOverviewModel>

@inject IViewComponentSelector viewComponentSelector

@if (Model.Count > 0)
{
    <div class="block block-recently-viewed-products">
        <div class="title">
            <strong>@T("Products.RecentlyViewedProducts")</strong>
        </div>
        <div class="listbox">
            <ul class="list">
                @for (var i = 0; i < Model.Count; i++)
                {
                    var product = Model[i];
                    var picture = product.PictureModels.FirstOrDefault();
                    <li @(i == Model.Count - 1 ? @Html.Raw(" class=\"last\"") : null)>
                        @if (!string.IsNullOrEmpty(picture.ImageUrl))
                        {
                            <a class="product-picture" href="@(Url.RouteUrl<Product>(new { SeName = product.SeName }))" title="@picture.Title">
                            @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
                            {
                                @await Component.InvokeAsync("LazyLoadImage", new(string Key, string Value)[] 
                                {
                                    ("src", picture.ImageUrl),
                                    ("alt", picture.AlternateText),
                                    ("title", picture.Title)
                                })

                            }
                            else
                            {
                                <img alt="@picture.AlternateText" src="@picture.ImageUrl" title="@picture.Title" />
                            }
                            </a>
                        }
                        <a class="product-name" href="@(Url.RouteUrl<Product>(new { SeName = product.SeName }))">@product.Name</a>
                    </li>
                }
            </ul>
        </div>
    </div>
}