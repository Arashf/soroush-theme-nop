@using Nop.Core
@using Nop.Services.Configuration
@using DocumentFormat.OpenXml.Wordprocessing

@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    Layout = "_Root";

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();

    //current category ID
    var currentCategoryId = 0;
    if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    var currentManufacturerId = 0;
    if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }

    //current product ID
    var currentProductId = 0;
    if (controllerName.Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;

    var isAccountPage = (controllerName.Equals("customer", StringComparison.InvariantCultureIgnoreCase) && (
        actionName.Equals("info", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("gdprtools", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("addresses", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("addressadd", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("addressedit", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("downloadableproducts", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("changepassword", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("avatar", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("checkgiftCardbalance", StringComparison.InvariantCultureIgnoreCase))) ||
        actionName.Equals("customerproductreviews", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("multifactorauthentication", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("configuremultifactorauthenticationprovider", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("helpdesk", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("pricematch", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("vendor", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("info", StringComparison.InvariantCultureIgnoreCase) ||
        (controllerName.Equals("backinstocksubscription", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customersubscriptions", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customerorders", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customerrewardpoints", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("boards", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customerforumsubscriptions", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("returnrequest", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customerreturnrequests", StringComparison.InvariantCultureIgnoreCase));
}

@await RenderSectionAsync("Breadcrumb", false)


@if (!isAccountPage)
{
    // side-2
    <div class="container-base" style="display: flex;margin-top: 20px;margin-bottom: 20px;">
        <div class="stickyFilterBox">
            @if (IsSectionDefined("left"))
            {
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
                @await RenderSectionAsync("left")
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
            }
            else
            {
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
            // class="block-wrapper"
               
                <div id="filterSidenav" class="sidenav">
                     <div class="filterHeader-mobile lg:hidden">
                                            <span>فیلترها</span>
                                            <div id="closebtnfilterSidenav" class="closebtn absolute top-[12px] left-[10px] w-[50px] h-[35px] flex justify-center p-2">
                                                <svg class="fill-iconLightColor stroke-iconLightColor stroke-3" height="16px" width="16px"
                                                    id="Layer_1" style="enable-background:new 0 0 512 512;" version="1.1"
                                                    viewBox="0 0 512 512" xml:space="preserve" xmlns="http://www.w3.org/2000/svg"
                                                    xmlns:xlink="http://www.w3.org/1999/xlink">
                                                    <path
                                                        d="M437.5,386.6L306.9,256l130.6-130.6c14.1-14.1,14.1-36.8,0-50.9c-14.1-14.1-36.8-14.1-50.9,0L256,205.1L125.4,74.5  c-14.1-14.1-36.8-14.1-50.9,0c-14.1,14.1-14.1,36.8,0,50.9L205.1,256L74.5,386.6c-14.1,14.1-14.1,36.8,0,50.9  c14.1,14.1,36.8,14.1,50.9,0L256,306.9l130.6,130.6c14.1,14.1,36.8,14.1,50.9,0C451.5,423.4,451.5,400.6,437.5,386.6z" />
                                                </svg>
                                            </div>
                                        </div>
                    @await RenderSectionAsync("CatalogFilters", false)
                    @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
                    @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
                    @await Component.InvokeAsync("VendorNavigation")
                    @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 80 })
                    @await Component.InvokeAsync("PopularProductTags")
                    @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
            }
        </div>
    <div class="center-2" style="width:100%">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnBefore })
        @RenderBody()
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnAfter })
    </div>
    </div>
}
else
{
    @if (IsSectionDefined("accountPageTitle"))
    {
        @RenderSection("accountPageTitle")
    }

    <div class="side-2">
        @if (IsSectionDefined("left"))
        {
            @RenderSection("left")
        }
    </div>
    <div class="center-2" style="width:100%">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnBefore })
        @RenderBody()
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnAfter })
    </div>
}